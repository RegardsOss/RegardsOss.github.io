"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[9564],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>b});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,b=p["".concat(l,".").concat(m)]||p[m]||c[m]||i;return n?a.createElement(b,o(o({ref:t},d),{},{components:n})):a.createElement(b,o({ref:t},d))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},28532:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const i={id:"rabbitmq",title:"RabbitMQ",slug:"/setup/swarm/advanced/rabbitmq/",sidebar_position:5},o=void 0,s={unversionedId:"setup/swarm/advanced/rabbitmq",id:"setup/swarm/advanced/rabbitmq",title:"RabbitMQ",description:"This guide allows you to configure the mandatory RabbitMQ server deployed with your Regards swarm stack.",source:"@site/docs/setup/swarm/advanced/swarm-rabbitmq.md",sourceDirName:"setup/swarm/advanced",slug:"/setup/swarm/advanced/rabbitmq/",permalink:"/docs/next/setup/swarm/advanced/rabbitmq/",draft:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/docs/setup/swarm/advanced/swarm-rabbitmq.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"rabbitmq",title:"RabbitMQ",slug:"/setup/swarm/advanced/rabbitmq/",sidebar_position:5},sidebar:"install",previous:{title:"Posgres database",permalink:"/docs/next/setup/swarm/advanced/postgres-database/"},next:{title:"MinIO",permalink:"/docs/next/setup/swarm/advanced/minio/"}},l={},u=[{value:"Cluster configuration",id:"cluster-configuration",level:2},{value:"Client port configuration",id:"client-port-configuration",level:2},{value:"No TLS (unsafe)",id:"no-tls-unsafe",level:3},{value:"With TLS",id:"with-tls",level:3},{value:"Admin port configuration",id:"admin-port-configuration",level:2},{value:"No TLS (unsafe)",id:"no-tls-unsafe-1",level:3},{value:"With TLS",id:"with-tls-1",level:3},{value:"Configure admin",id:"configure-admin",level:2},{value:"Configure users",id:"configure-users",level:2},{value:"Configure shovels",id:"configure-shovels",level:2},{value:"Create queues, exchanges and bindings",id:"create-queues-exchanges-and-bindings",level:2},{value:"Mutualised RabbitMQ",id:"mutualised-rabbitmq",level:3}],d={toc:u},p="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This guide allows you to configure the mandatory RabbitMQ server deployed with your Regards swarm stack."),(0,r.kt)("admonition",{title:"RabbitMQ Configuration",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Edit your inventory file ",(0,r.kt)("inlineCode",{parentName:"p"},"inventories/<your inventory>/group_vars/regards_nodes/main.yml")," to override RabbitMQ\ninformation")),(0,r.kt)("admonition",{title:"Format used",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The REGARDS playbooks generates a definition file that is imported by the RabbitMQ\nservice. ",(0,r.kt)("a",{parentName:"p",href:"https://www.rabbitmq.com/docs/definitions"},"Click here to get more info about this format"),".")),(0,r.kt)("h2",{id:"cluster-configuration"},"Cluster configuration"),(0,r.kt)("p",null,"To deploy a cluster of RabbitMQ nodes, you need to set ",(0,r.kt)("inlineCode",{parentName:"p"},"global_service")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"group_docker_cots:\n  rabbitmq:\n    global_service: true\n")),(0,r.kt)("p",null,"If you don't want all your Swarm nodes to receive a RabbitMQ replica, use Swarm label node placement constraint:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"group_docker_cots:\n  rabbitmq:\n    global_service: true\n    node_label_placement_constraint:\n      key: type\n      value: cots\n")),(0,r.kt)("p",null,"This example tells Swarm to deploy a replica of RabbitMQ on every node having a property ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," valued to ",(0,r.kt)("inlineCode",{parentName:"p"},"cots"),"."),(0,r.kt)("h2",{id:"client-port-configuration"},"Client port configuration"),(0,r.kt)("p",null,"Client configuration allows external programs to contact the RabbitMQ server deployed."),(0,r.kt)("h3",{id:"no-tls-unsafe"},"No TLS (unsafe)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"group_docker_cots:\n  rabbitmq:\n    # Port to connect to RabbitMQ server\n    client: 5672\n")),(0,r.kt)("h3",{id:"with-tls"},"With TLS"),(0,r.kt)("p",null,"To enable ssl on your RabbitMQ server, you need define the port (using ",(0,r.kt)("inlineCode",{parentName:"p"},"client_ssl")," property):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"group_docker_cots:\n  rabbitmq:\n    # Port to connect to RabbitMQ server\n    client: 5672\n    # Port to connect to RabbitMQ server with ssl\n    client_ssl: 5671\n")),(0,r.kt)("p",null,"And you need to provide SSL certificates names inside your inventory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="Certificates used by RabbitMQ"',title:'"Certificates',used:!0,by:!0,'RabbitMQ"':!0},"group_docker_cots_configuration:\n  rabbitmq:\n    ssl:\n      crt: certificate.crt\n      key: certificate.key\n      ca: certificate.ca.crt\n")),(0,r.kt)("admonition",{title:"Certificates location",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Certificate files must be located inside ",(0,r.kt)("inlineCode",{parentName:"p"},"<my-inventory>/static/ssl/")," folder in your inventory.",(0,r.kt)("br",{parentName:"p"}),"\n","In upper example, it means the file ",(0,r.kt)("inlineCode",{parentName:"p"},"<my-inventory>/static/ssl/certificate.crt")," exists.")),(0,r.kt)("h2",{id:"admin-port-configuration"},"Admin port configuration"),(0,r.kt)("p",null,"Our playbook let you configure the port used to administrate RabbitMQ using a browser."),(0,r.kt)("h3",{id:"no-tls-unsafe-1"},"No TLS (unsafe)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"group_docker_cots:\n  rabbitmq:\n    # Port to connect to RabbitMQ admin dashboard\n    http: 15672\n")),(0,r.kt)("h3",{id:"with-tls-1"},"With TLS"),(0,r.kt)("p",null,"On REGARDS Swarm deployment, it's the rs-front service that provides the RabbitMQ Admin UI threw TLS."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"group_docker_mservices:\n  front:\n    rabbitmq_admin: 15672\n\n\ngroup_docker_cots:\n  rabbitmq:\n  # rabbitmq admin HMI is open threw rs-front, no property used here\n")),(0,r.kt)("h2",{id:"configure-admin"},"Configure admin"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"group_docker_cots:\n  rabbitmq:\n    # Administrator user name for RabbitMQ Server\n    user: my-admin\n    # Administrator user password for RabbitMQ Server \n    password: XXXXX\n\ngroup_config_mservices:\n  amqp:\n    # Administrator user name for RabbitMQ Server\n    user: my-admin\n    # Administrator user password for RabbitMQ Server \n    password: XXXXX\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If you do not override this property, admin will be the default RabbitMQ administrator ",(0,r.kt)("inlineCode",{parentName:"p"},"guest"),".",(0,r.kt)("br",{parentName:"p"}),"\n","If you override the administrator name, user ",(0,r.kt)("inlineCode",{parentName:"p"},"guest")," is not allowed")),(0,r.kt)("h2",{id:"configure-users"},"Configure users"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"group_docker_cots:\n  rabbitmq:\n    # RabbitMQ configuration to automatically create users\n    additional_users:\n      - name: exemple-user\n        password: XXXXX\n        tags: ''\n    # RabbitMQ configuration to automatically create users permissions \n    user_permissions:\n      - user: exemple-user\n        vhost: regards.multitenant.manager\n        configure: ''\n        write: ''\n        read: ''\n")),(0,r.kt)("h2",{id:"configure-shovels"},"Configure shovels"),(0,r.kt)("p",null,"Our playbook provides following configuration to automatically create shovels"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"group_docker_cots:\n  rabbitmq:\n    additional_parameters:\n      - component: shovel\n        name: Exemple shovel\n        vhost: regards.multitenant.manager\n        value:\n          ack-mode: on-confirm\n          dest-add-forward-headers: false\n          dest-protocol: amqp091\n          dest-exchange: exemple.exchange\n          dest-uri: amqp:///regards.multitenant.manager\n          src-delete-after: never\n          src-protocol: amqp091\n          src-queue: source.queue\n          src-uri: amqp://user:password@other-amqp-server-adress:5672/vhost\n")),(0,r.kt)("admonition",{title:"Shovels",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Most of the time, a shovel takes messages from a distant queue and put them in a local exchange")),(0,r.kt)("h2",{id:"create-queues-exchanges-and-bindings"},"Create queues, exchanges and bindings"),(0,r.kt)("p",null,"Our playbook provides three different properties to automatically create RabbitMQ queues, exchanges and bindings:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"additional_queues")," property to manage queues"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"additional_exchanges")," property to manage exchanges"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"additional_bindings")," property to manage bindings")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"group_docker_cots:\n  rabbitmq:\n    additional_queues:\n      - name: exemple.queue\n        vhost: regards.multitenant.manager\n        durable: true\n        auto_delete: false\n        arguments:\n          x-dead-letter-exchange: regards.DLX\n          x-dead-letter-routing-key: regards.DLQ\n          x-max-priority: 255\n    additional_exchanges:\n      - name: exemple.exchange\n        vhost: regards.multitenant.manager\n        type: topic\n        durable: true\n        internal: false\n    additional_bindings:\n      - source: exemple.exchange\n        vhost: regards.multitenant.manager\n        destination: exemple.queue\n        destination_type: queue\n        routing_key: 'exemple'\n")),(0,r.kt)("h3",{id:"mutualised-rabbitmq"},"Mutualised RabbitMQ"),(0,r.kt)("p",null,"If you prefer to use a mutualised instance of RabbitMQ, ensure it\nuses ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/setup/swarm/cots-version/"},"the right version of RabbitMQ")," and plugin ",(0,r.kt)("inlineCode",{parentName:"p"},"rabbitmq_delayed_message_exchange")," is active"))}c.isMDXComponent=!0}}]);
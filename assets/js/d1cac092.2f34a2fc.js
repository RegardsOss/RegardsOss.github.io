"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[98026],{15680:(e,n,r)=>{r.d(n,{xA:()=>c,yg:()=>g});var t=r(96540);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),p=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},c=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(r),u=o,g=m["".concat(l,".").concat(u)]||m[u]||d[u]||a;return r?t.createElement(g,s(s({ref:n},c),{},{components:r})):t.createElement(g,s({ref:n},c))}));function g(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[m]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=r[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},21983:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var t=r(58168),o=(r(96540),r(15680));const a={id:"swarm-networks",title:"Networks",slug:"/setup/swarm/advanced/swarm-networks"},s=void 0,i={unversionedId:"setup/advanced/swarm-networks",id:"setup/advanced/swarm-networks",title:"Networks",description:"This guide allows you to tune SWARM networks thanks to your inventory.",source:"@site/docs/setup/advanced/swarm-networks.md",sourceDirName:"setup/advanced",slug:"/setup/swarm/advanced/swarm-networks",permalink:"/docs/next/setup/swarm/advanced/swarm-networks",draft:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/docs/setup/advanced/swarm-networks.md",tags:[],version:"current",frontMatter:{id:"swarm-networks",title:"Networks",slug:"/setup/swarm/advanced/swarm-networks"},sidebar:"install",previous:{title:"Mount volumes, configs...",permalink:"/docs/next/setup/swarm/advanced/swarm-mount"},next:{title:"Securise using HTTPS",permalink:"/docs/next/setup/swarm/advanced/regards-https/"}},l={},p=[{value:"Internal network",id:"internal-network",level:3},{value:"Swarm networks",id:"swarm-networks",level:4},{value:"REGARDS network",id:"regards-network",level:4},{value:"External networks",id:"external-networks",level:3},{value:"Preferred networks",id:"preferred-networks",level:3}],c={toc:p},m="wrapper";function d(e){let{components:n,...r}=e;return(0,o.yg)(m,(0,t.A)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"This guide allows you to tune SWARM networks thanks to your inventory."),(0,o.yg)("h3",{id:"internal-network"},"Internal network"),(0,o.yg)("admonition",{title:"ensure networks are reserved",type:"danger"},(0,o.yg)("p",{parentName:"admonition"},"Netmask, defined inside ",(0,o.yg)("a",{parentName:"p",href:"#swarm-network"},"Swarm networks")," and ",(0,o.yg)("a",{parentName:"p",href:"#regards-network"},"REGARDS network"),", must be reserved by\nyour ",(0,o.yg)("strong",{parentName:"p"},"corporation")," to prevent the usage of these reserved masks.",(0,o.yg)("br",{parentName:"p"}),"\n","Otherwise, a machine that has an IP inside one of these reserved masks ",(0,o.yg)("strong",{parentName:"p"},"would not be reachable from your REGARDS\ncluster"),".  ")),(0,o.yg)("h4",{id:"swarm-networks"},"Swarm networks"),(0,o.yg)("p",null,"By default, ",(0,o.yg)("em",{parentName:"p"},"demo inventories")," defines several communication networks used by Swarm nodes to communicate to each\nother.",(0,o.yg)("br",{parentName:"p"}),"\n","Default values are :"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yml"},"# Inside inventories/<inventory name>/group_vars/docker_nodes/main.yml\ndocker_bip: 10.122.20.1/24\ndocker_ingress_network: 10.122.22.0/24\ndocker_ingress_network_gateway: 10.122.22.1\ndocker_gwbridge_network: 10.122.21.0/24\n")),(0,o.yg)("admonition",{type:"info"},(0,o.yg)("p",{parentName:"admonition"},"See more about these networks on the Docker documentation:"),(0,o.yg)("ul",{parentName:"admonition"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://docs.docker.com/engine/swarm/ingress/"},"Ingress network for routing mesh")," enables each node in the swarm to\naccept connections on published ports for any service running in the swarm"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://docs.docker.com/engine/swarm/networking/#customize-the-docker_gwbridge"},"The docker_gwbridge is a virtual bridge"),"\nthat connects the overlay networks (including the ingress network) to an individual Docker daemon's physical network"),(0,o.yg)("li",{parentName:"ul"},"Docker uses a software bridge which lets containers connected to\nthe ",(0,o.yg)("a",{parentName:"li",href:"https://docs.docker.com/network/drivers/bridge/#use-the-default-bridge-network"},"same bridge network communicate")))),(0,o.yg)("h4",{id:"regards-network"},"REGARDS network"),(0,o.yg)("p",null,"By default, ",(0,o.yg)("em",{parentName:"p"},"demo inventories")," defines an internal microservice communication network with the following value :"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yml"},'# Inside inventories/<inventory name>/group_vars/regards_nodes/main.yml\ngroup_docker_network_ip_network: "10.11.7."\n')),(0,o.yg)("p",null,"This property allows to create an ",(0,o.yg)("em",{parentName:"p"},"overlay")," network dedicated to our microservices with:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"a subnet in ",(0,o.yg)("em",{parentName:"li"},"0/24")),(0,o.yg)("li",{parentName:"ul"},"and its gateway.")),(0,o.yg)("h3",{id:"external-networks"},"External networks"),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"This option is facultative.")),(0,o.yg)("p",null,"To define external access to microservices, you must first declare the ",(0,o.yg)("strong",{parentName:"p"},"external networks")," to use as follows:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yml"},"group_config_mservices:\n  external_networks:\n    - network: foo\n      name: net_foo\n")),(0,o.yg)("admonition",{title:"Generated configuration",type:"info"},(0,o.yg)("p",{parentName:"admonition"},"This configuration generates networks top-level element as defined in\nthe ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/compose-spec/compose-spec/blob/master/spec.md#networks-top-level-element"},"compose specification"),".")),(0,o.yg)("admonition",{title:"Reminder",type:"warning"},(0,o.yg)("p",{parentName:"admonition"},"The creation of these ",(0,o.yg)("strong",{parentName:"p"},"external networks")," is not handled by regards playbook. You must create them beforehand by your\nown!")),(0,o.yg)("p",null,"It is then possible to define specific connections to the following microservices: ",(0,o.yg)("em",{parentName:"p"},"gateway"),", ",(0,o.yg)("em",{parentName:"p"},"authentication"),",\n",(0,o.yg)("em",{parentName:"p"},"catalog")," or ",(0,o.yg)("em",{parentName:"p"},"front"),"."),(0,o.yg)("p",null,"For instance:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yml"},"group_docker_mservices:\n  catalog:\n    configuration:\n      external_networks:\n        - network: foo\n          aliases:\n            - foo.catalog\n")),(0,o.yg)("admonition",{title:"Generated configuration",type:"info"},(0,o.yg)("p",{parentName:"admonition"},"This configuration generates networks and optionnaly aliases as\ndefined ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/compose-spec/compose-spec/blob/master/spec.md#aliases"},"here"),".")),(0,o.yg)("h3",{id:"preferred-networks"},"Preferred networks"),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"This option is facultative.")),(0,o.yg)("p",null,"As a side effect when ",(0,o.yg)("strong",{parentName:"p"},"several networks")," are defined inside your SWARM network, you will have to specify the preferred\nnetworks in order to microservice to talk to each other without network issue."),(0,o.yg)("p",null,"So to force internal microservice communication to use ",(0,o.yg)("strong",{parentName:"p"},"internal network"),", you will have to setup the following\nproperties:"),(0,o.yg)("p",null,"For instance:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yml"},"group_config_mservices:\n  # Value depends on your internal network configuration\n  preferred_networks: 10.11\n")))}d.isMDXComponent=!0}}]);
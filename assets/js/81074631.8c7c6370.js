"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[63751],{66106:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>a});var i=s(74848),n=s(28453);const l={title:"Local Plugin",sidebar_label:"Local",slug:"/development/services/storage/plugins/local",sidebar_position:2},r=void 0,o={id:"development/services/storage/plugins/local",title:"Local Plugin",description:"Description",source:"@site/docs/development/services/storage/plugins/local.md",sourceDirName:"development/services/storage/plugins",slug:"/development/services/storage/plugins/local",permalink:"/docs/development/services/storage/plugins/local",draft:!1,unlisted:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/docs/development/services/storage/plugins/local.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Local Plugin",sidebar_label:"Local",slug:"/development/services/storage/plugins/local",sidebar_position:2},sidebar:"dev",previous:{title:"Available plugins",permalink:"/docs/development/services/storage/plugins/overview"},next:{title:"S3",permalink:"/docs/development/services/storage/plugins/s3"}},d={},a=[{value:"Description",id:"description",level:2},{value:"Small files management",id:"small-files-management",level:2},{value:"Configuration",id:"configuration",level:2}];function c(e){const t={h2:"h2",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(t.p,{children:"The Local storage plugin uses the file system where regards is deployed to store files."}),"\n",(0,i.jsx)(t.h2,{id:"small-files-management",children:"Small files management"}),"\n",(0,i.jsx)(t.p,{children:"When storing a new file in this location, small files are not stored directly in the directory but are stored instead in a\nzip archive."}),"\n",(0,i.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Parameter Name"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Root Directory"}),(0,i.jsx)(t.td,{children:"Path (String)"}),(0,i.jsx)(t.td,{children:"Root path on the file system where the files will be stored (/rootPath/subdirectory/checksum)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Enable physical deletion of files"}),(0,i.jsx)(t.td,{children:"Boolean"}),(0,i.jsx)(t.td,{children:"If false, the files won't be deleted from the file system when they are deleted from regards"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Files maximum size for zips"}),(0,i.jsx)(t.td,{children:"Integer (in bytes)"}),(0,i.jsx)(t.td,{children:"Maximal size of a file to be considered a small file so it uses the small file archival system"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Maximum zip size"}),(0,i.jsx)(t.td,{children:"Integer (in bytes )"}),(0,i.jsx)(t.td,{children:"Maximal size of an archive, no more files will be added once it reaches this size"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"File Naming Strategy"}),(0,i.jsx)(t.td,{children:"Enum (String)"}),(0,i.jsx)(t.td,{children:"Either CHECKSUM (default) or FILENAME, determine how the file will be named on the file system"})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>o});var i=s(96540);const n={},l=i.createContext(n);function r(e){const t=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),i.createElement(l.Provider,{value:t},e.children)}}}]);
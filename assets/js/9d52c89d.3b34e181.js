"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[75426],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(n),g=r,m=u["".concat(l,".").concat(g)]||u[g]||p[g]||o;return n?a.createElement(m,s(s({ref:t},d),{},{components:n})):a.createElement(m,s({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},26608:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={id:"logging-stack",title:"Logging stack",slug:"/setup/swarm/advanced/logging-stack/"},s=void 0,i={unversionedId:"setup/advanced/logging-stack",id:"setup/advanced/logging-stack",title:"Logging stack",description:"This guide allows you to deploy logging and monitoring services thanks to your inventory.",source:"@site/docs/setup/advanced/swarm-logging-stack.md",sourceDirName:"setup/advanced",slug:"/setup/swarm/advanced/logging-stack/",permalink:"/docs/setup/swarm/advanced/logging-stack/",draft:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/docs/setup/advanced/swarm-logging-stack.md",tags:[],version:"current",frontMatter:{id:"logging-stack",title:"Logging stack",slug:"/setup/swarm/advanced/logging-stack/"},sidebar:"install",previous:{title:"Deploy required microservices",permalink:"/docs/setup/swarm/advanced/microservice-setup"},next:{title:"Posgres database",permalink:"/docs/setup/swarm/advanced/postgres-database/"}},l={},c=[{value:"Active services",id:"active-services",level:2},{value:"Multi-nodes swarm cluster",id:"multi-nodes-swarm-cluster",level:2},{value:"Configure Grafana service",id:"configure-grafana-service",level:2},{value:"SSL",id:"ssl",level:3},{value:"Elasticsearch",id:"elasticsearch",level:3},{value:"Postgres",id:"postgres",level:3}],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This guide allows you to deploy logging and monitoring services thanks to your inventory."),(0,r.kt)("h2",{id:"active-services"},"Active services"),(0,r.kt)("p",null,"Add following services inside your inventory file ",(0,r.kt)("inlineCode",{parentName:"p"},"group_vars/regards_nodes/main.yml"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# COTS\ngroup_docker_cots:\n  [...]\n  elasticsearch_exporter:\n    tag: "{{ group_docker_tags.cots }}"\n  node_exporter:\n    tag: "{{ group_docker_tags.cots }}"\n  telegraf:\n    tag: "{{ group_docker_tags.cots }}"\n    # Telegraf, Node exporter and Fluentbit are global services\n  kafka:\n    tag: "{{ group_docker_tags.cots }}"\n  fluentbit:\n    tag: "{{ group_docker_tags.cots }}"\n  fluentd:\n    tag: "{{ group_docker_tags.cots }}"\n  prometheus:\n    tag: "{{ group_docker_tags.cots }}"\n  loki:\n    tag: "{{ group_docker_tags.cots }}"\n  grafana:\n    tag: "{{ group_docker_tags.cots }}"\n    port: 3000\n')),(0,r.kt)("h2",{id:"multi-nodes-swarm-cluster"},"Multi-nodes swarm cluster"),(0,r.kt)("p",null,"If you have several nodes in your swarm cluster, you need to add ",(0,r.kt)("inlineCode",{parentName:"p"},"node_label_placement_constraint")," to services that uses local disk: ",(0,r.kt)("inlineCode",{parentName:"p"},"Loki")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Prometheus"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"group_docker_cots:\n  [...]\n  prometheus:\n    [...]\n    node_label_placement_constraint:\n      key: type\n      value: logging\n  loki:\n    [...]\n    node_label_placement_constraint:\n      key: type\n      value: logging\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"In a multi node swarm cluster, we recommend to dedicate a node for logging and monitoring purpose using Swarm placement constraints")),(0,r.kt)("p",null,"To do that, you need to edit your inventory file ",(0,r.kt)("inlineCode",{parentName:"p"},"hosts")," to add the label used as a ",(0,r.kt)("inlineCode",{parentName:"p"},"node_label_placement_constraint"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'# REGARDS\n[regards_nodes]\nregards-slaveX labels=\'{"type": "logging"}\' ansible_host=[...]\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you've updated ",(0,r.kt)("inlineCode",{parentName:"p"},"labels")," on the ",(0,r.kt)("inlineCode",{parentName:"p"},"hosts")," file, you need to patch swarm nodes using ",(0,r.kt)("inlineCode",{parentName:"p"},"delete-swarm.yml")," then ",(0,r.kt)("inlineCode",{parentName:"p"},"setup-vm.yml")," playbooks.")),(0,r.kt)("h2",{id:"configure-grafana-service"},"Configure Grafana service"),(0,r.kt)("h3",{id:"ssl"},"SSL"),(0,r.kt)("p",null,"If you have SSL certificates (like the one used by ",(0,r.kt)("a",{parentName:"p",href:"/docs/setup/swarm/advanced/regards-https/"},"REGARDS frontend service"),"), you can give them to Grafana:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'group_docker_stack_domain: my-regards.cnes.fr\ngroup_docker_cots:\n  [...]\n  grafana:\n    host: "{{ group_docker_stack_domain }}"\n    ssl:\n      crt: "{{ group_docker_stack_domain }}.crt"\n      key: "{{ group_docker_stack_domain }}.key"\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"When SSL informations are provided inside inventory, Grafana is available through HTTPS protocol.")),(0,r.kt)("h3",{id:"elasticsearch"},"Elasticsearch"),(0,r.kt)("p",null,"If you use the REGARDS Elasticsearch service (and not use a mutualised one), you can connect Grafana to see indexes from Elasticsearch server. You need to list indexes like this:  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"group_docker_cots:\n  [...]\n  grafana:\n    datasources:\n      regards_cots:\n        elasticsearch_indexes:\n          - project1\n          - project2\n          - ...\n          # list here the REGARDS tenant in lower case \n")),(0,r.kt)("h3",{id:"postgres"},"Postgres"),(0,r.kt)("p",null,"If you use a mutualised Postgres, you can configure how Grafana connects to each tenant"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"group_docker_cots:\n  [...]\n  grafana:\n    datasources:\n      custom:\n        postgres:\n          - name: BD Project <project name>\n            url: <database URL>:<database port>\n            user: <database user>\n            password: <Database password - use Ansible Vault!>\n            databases: \n              - <database name>\n          [...]\n")),(0,r.kt)("p",null,"That's it!"))}p.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[26184],{94152:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>c,toc:()=>l});var r=s(74848),n=s(28453);const t={id:"backend-registry-conception",title:"How it works",sidebar_label:"How it works",slug:"/development/backend/services/registry/conception/",sidebar_position:2},o=void 0,c={id:"development/services/registry/backend-registry-conception",title:"How it works",description:"The config microservice is based on Spring Cloud Netflix Eureka.",source:"@site/versioned_docs/version-2.0.0/development/services/registry/conception.md",sourceDirName:"development/services/registry",slug:"/development/backend/services/registry/conception/",permalink:"/docs/development/backend/services/registry/conception/",draft:!1,unlisted:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/versioned_docs/version-2.0.0/development/services/registry/conception.md",tags:[],version:"2.0.0",sidebarPosition:2,frontMatter:{id:"backend-registry-conception",title:"How it works",sidebar_label:"How it works",slug:"/development/backend/services/registry/conception/",sidebar_position:2},sidebar:"dev",previous:{title:"Overview",permalink:"/docs/development/backend/services/registry/overview/"},next:{title:"Overview",permalink:"/docs/development/backend/services/storage/overview/"}},a={},l=[{value:"Microservice registry",id:"microservice-registry",level:2},{value:"Load balancing",id:"load-balancing",level:2}];function d(e){const i={a:"a",br:"br",code:"code",h2:"h2",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(i.p,{children:["The config microservice is based on ",(0,r.jsx)(i.a,{href:"https://cloud.spring.io/spring-cloud-netflix/reference/html/",children:"Spring Cloud Netflix Eureka"}),"."]}),"\n",(0,r.jsx)(i.p,{children:"Spring Cloud Eureka is used for two purposes:"}),"\n",(0,r.jsx)(i.h2,{id:"microservice-registry",children:"Microservice registry"}),"\n",(0,r.jsxs)(i.p,{children:["In a ",(0,r.jsx)(i.a,{href:"/docs/development/concepts/microservices/",children:"microservice"})," architecture, it's crucial for each service to discover and",(0,r.jsx)(i.br,{}),"\n","communicate with others without needing to know their exact network locations or addresses.\nA ",(0,r.jsx)(i.strong,{children:"microservice registry"})," enables microservices to dynamically discover and communicate with each other\nwithout needing to know the addresses of other services in advance. This simplifies scalability, deployment\nmanagement, and system resilience by allowing reliable and flexible communication between microservices."]}),"\n",(0,r.jsxs)(i.p,{children:["the Eureka server (the ",(0,r.jsx)(i.code,{children:"rs-registry"})," microservice) fulfills this role by centralizing information about available\nservices."]}),"\n",(0,r.jsx)(i.p,{children:"The main concepts used are:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Service Registration"}),": Each microservice, when it starts up, registers itself with the Eureka server by sending its\nIP address, port, and other necessary metadata. This allows the Eureka server to maintain an up-to-date list of\nall available services."]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Service Discovery"}),": When one microservice needs to communicate with another, it queries the Eureka server to obtain\nthe location (URL) of the target service. This allows dynamic resolution of the service address, which is\nparticularly useful when service instances can scale up or down or move within the network."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"load-balancing",children:"Load balancing"}),"\n",(0,r.jsx)(i.p,{children:"Spring Cloud Eureka also plays a key role in load balancing within a microservice architecture. When a service is deployed\nwith multiple instances (for scalability or redundancy), it's important to distribute incoming requests evenly across these\ninstances to ensure optimal performance and resource utilization."}),"\n",(0,r.jsxs)(i.p,{children:["When a client service queries the ",(0,r.jsx)(i.code,{children:"rs-registry"})," microservice to find a target service, the Eureka server provides a\nlist of all active instances, then uses this information to distribute requests across the available\ninstances. This ensures that no single instance is overwhelmed with too many requests, improving overall system\nreliability and responsiveness."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:s(65691).A+"",width:"918",height:"261"})})]})}function h(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65691:(e,i,s)=>{s.d(i,{A:()=>r});const r=s.p+"assets/images/registry-conception-2d2efe9d4255dfecee58d76730cf5279.png"},28453:(e,i,s)=>{s.d(i,{R:()=>o,x:()=>c});var r=s(96540);const n={},t=r.createContext(n);function o(e){const i=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(t.Provider,{value:i},e.children)}}}]);
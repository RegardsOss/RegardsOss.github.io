"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[72091],{48:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>a,contentTitle:()=>d,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var t=s(74848),n=s(28453);const i={title:"Subscribe to requests from rs-worker-manager",sidebar_label:"Workers - Subscribe to requests",slug:"/development/services/worker-manager/api-guides/amqp/subscribe-worker-request",sidebar_position:4},d=void 0,o={id:"development/services/worker-manager/api-guides/amqp/amqp-worker-subscribe-requests",title:"Subscribe to requests from rs-worker-manager",description:"Introduction",source:"@site/versioned_docs/version-2.0.0/development/services/worker-manager/api-guides/amqp/amqp-worker-subscribe-requests.md",sourceDirName:"development/services/worker-manager/api-guides/amqp",slug:"/development/services/worker-manager/api-guides/amqp/subscribe-worker-request",permalink:"/docs/development/services/worker-manager/api-guides/amqp/subscribe-worker-request",draft:!1,unlisted:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/versioned_docs/version-2.0.0/development/services/worker-manager/api-guides/amqp/amqp-worker-subscribe-requests.md",tags:[],version:"2.0.0",sidebarPosition:4,frontMatter:{title:"Subscribe to requests from rs-worker-manager",sidebar_label:"Workers - Subscribe to requests",slug:"/development/services/worker-manager/api-guides/amqp/subscribe-worker-request",sidebar_position:4},sidebar:"dev",previous:{title:"Workers - Send heart beat",permalink:"/docs/development/services/worker-manager/api-guides/amqp/publish-heartbeat"},next:{title:"Workers - Send response",permalink:"/docs/development/services/worker-manager/api-guides/amqp/publish-worker-response"}},a={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Regards AMQP api",id:"regards-amqp-api",level:2},{value:"Exchange",id:"exchange",level:2},{value:"Queue",id:"queue",level:2},{value:"AMQP message format",id:"amqp-message-format",level:2},{value:"Headers",id:"headers",level:3},{value:"Body",id:"body",level:3}];function h(e){const r={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(r.p,{children:["This section describes how workers must subscribe to submission request events sent by the ",(0,t.jsx)(r.code,{children:"rs-worker-manager"}),"\nmicroservice as described in the ",(0,t.jsx)(r.a,{href:"/docs/development/services/worker-manager/api-guides/amqp/publish-request",children:"publish guide"}),"."]}),"\n",(0,t.jsxs)(r.p,{children:["Requests and responses are linked with a correlation identifier : ",(0,t.jsx)(r.strong,{children:"requestId"})," that is provided in submission\nrequests and added in service responses."]}),"\n",(0,t.jsx)(r.admonition,{title:"RabbitMQ timeout",type:"danger",children:(0,t.jsxs)(r.p,{children:["Keep in mind the default RabbitMQ timeout is configured to ",(0,t.jsx)(r.strong,{children:"30 mins"}),". If your worker can take more than 30min to\nprocess a request (or a bulk), you\nshould ",(0,t.jsx)(r.a,{href:"/docs/setup/swarm/advanced/rabbitmq/#consumer-timeout",children:"override the RabbitMQ consumer timeout"}),"."]})}),"\n",(0,t.jsx)(r.h2,{id:"regards-amqp-api",children:"Regards AMQP api"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.a,{href:"/docs/development/concepts/amqp-api/",children:"Regards AMQP API concept"})," describe how AMQP interfaces must be handled to\nsubmit events or to subscribe to events."]}),"\n",(0,t.jsx)(r.h2,{id:"exchange",children:"Exchange"}),"\n",(0,t.jsx)(r.p,{children:"Requests must be published to REGARDS Rabbitmq exchange:"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Exchange (type topic)"}),(0,t.jsx)(r.th,{children:"Virtual host"})]})}),(0,t.jsx)(r.tbody,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"regards.worker.<worker type>.request"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"regards.multitenant.manager"})})]})})]}),"\n",(0,t.jsx)(r.p,{children:"The exchange name is built for each worker with the worker type parameter."}),"\n",(0,t.jsx)(r.h2,{id:"queue",children:"Queue"}),"\n",(0,t.jsxs)(r.p,{children:["Every consumer of this\nexchange ",(0,t.jsx)(r.a,{href:"/docs/development/concepts/amqp-api/#subscribe-to-regards-published-events",children:"must create its own queue bound to this exchange"}),"."]}),"\n",(0,t.jsx)(r.admonition,{title:"Worker context",type:"danger",children:(0,t.jsxs)(r.p,{children:["In the context of Workers, all workers of the same type should ",(0,t.jsx)(r.strong,{children:"share the same queue"}),", as the goal is to have ",(0,t.jsx)(r.strong,{children:"a\nsingle queue"})," that stores all the messages.",(0,t.jsx)(r.br,{}),"\n","Workers can then pull from this queue to retrieve the requests that need to be processed."]})}),"\n",(0,t.jsx)(r.h2,{id:"amqp-message-format",children:"AMQP message format"}),"\n",(0,t.jsx)(r.h3,{id:"headers",children:"Headers"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Parameter"}),(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"regards.tenant"}),(0,t.jsx)(r.td,{children:"String"}),(0,t.jsx)(r.td,{children:"Tenant name depends on REGARDS instance project configuration."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"regards.request.id"}),(0,t.jsx)(r.td,{children:"String"}),(0,t.jsx)(r.td,{children:"Request identifier."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"regards.request.owner"}),(0,t.jsx)(r.td,{children:"String"}),(0,t.jsx)(r.td,{children:"Name of the request provider"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"regards.request.session"}),(0,t.jsx)(r.td,{children:"String"}),(0,t.jsx)(r.td,{children:"Name of the session"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"regards.request.content_type"}),(0,t.jsx)(r.td,{children:"String"}),(0,t.jsx)(r.td,{children:"Content type of request (content type accepted by the worker)"})]})]})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",metastring:'title="Example of the headers of a worker request event message"',children:'"regards.tenant": "tenant"\n"regards.request.id": "requestId"\n"regards.request.owner": "owner"\n"regards.request.session": "session"\n"regards.request.content_type": "contentType"\n'})}),"\n",(0,t.jsx)(r.h3,{id:"body",children:"Body"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"rs-worker-manager"})," has saved the message body in Byte format; it doesn't deserialize it because\nthe body content is not used by the ",(0,t.jsx)(r.code,{children:"rs-worker-manager"})," but by the worker during processing."]}),"\n",(0,t.jsxs)(r.p,{children:["This message body is identical to the message body used when publishing a message to\nthe ",(0,t.jsx)(r.code,{children:"rs-worker-manager"})," (",(0,t.jsx)(r.a,{href:"/docs/development/services/worker-manager/api-guides/amqp/publish-request#tag/body",children:"using AMQP API"}),")."]})]})}function l(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},28453:(e,r,s)=>{s.d(r,{R:()=>d,x:()=>o});var t=s(96540);const n={},i=t.createContext(n);function d(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);
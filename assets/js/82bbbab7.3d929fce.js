"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[17279],{9986:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var i=n(74848),s=n(28453);const o={title:"How it works",sidebar_label:"How it works",slug:"/development/backend/services/authentication/",sidebar_position:2},r=void 0,a={id:"development/services/authentication/authentication-conception",title:"How it works",description:"Introduction",source:"@site/versioned_docs/version-2.0.0/development/services/authentication/authentication-conception.md",sourceDirName:"development/services/authentication",slug:"/development/backend/services/authentication/",permalink:"/docs/development/backend/services/authentication/",draft:!1,unlisted:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/versioned_docs/version-2.0.0/development/services/authentication/authentication-conception.md",tags:[],version:"2.0.0",sidebarPosition:2,frontMatter:{title:"How it works",sidebar_label:"How it works",slug:"/development/backend/services/authentication/",sidebar_position:2},sidebar:"dev",previous:{title:"Overview",permalink:"/docs/development/backend/services/authentication/overview/"},next:{title:"Get JWT Token",permalink:"/docs/development/backend/services/authentication/api-guides/retrieve-token-oauth2/"}},c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Token REGARDS",id:"token-regards",level:2},{value:"Authentication methods",id:"authentication-methods",level:2},{value:"Internal authentication",id:"internal-authentication",level:3},{value:"Identity Provider service",id:"identity-provider-service",level:3},{value:"Service Provider service",id:"service-provider-service",level:3}];function l(e){const t={a:"a",admonition:"admonition",br:"br",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(t.p,{children:"The purpose of the authentication service is to enable REGARDS users to obtain an authentication token.\nThis authentication token will then allow them to access all REGARDS microservices through their REST API."}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["Currently, ",(0,i.jsx)(t.a,{href:"/docs/development/concepts/amqp-api/",children:"AMQP API"})," does not need this kind of authentication.",(0,i.jsx)(t.br,{}),"\n","You just have to be logged to RabbitMQ with a dedicated user."]})}),"\n",(0,i.jsx)(t.h2,{id:"token-regards",children:"Token REGARDS"}),"\n",(0,i.jsxs)(t.p,{children:["All REGARDS tokens are ",(0,i.jsx)(t.strong,{children:"Json Web Token"})," or ",(0,i.jsx)(t.strong,{children:"JWT"}),".",(0,i.jsx)(t.br,{}),"\n","A Json Web Token contains ",(0,i.jsx)(t.strong,{children:"encrypted"})," information like current ",(0,i.jsx)(t.a,{href:"/docs/development/concepts/multitenant/",children:"tenant"}),",\nusername, or role, that can be decrypted with a key.",(0,i.jsx)(t.br,{}),"\n","Each microservice know this key and can decrypt JWT. This is important to make sure that current user is well\nauthenticated."]}),"\n",(0,i.jsxs)(t.p,{children:["This token is pass as a header when calling a\n",(0,i.jsx)(t.a,{href:"/docs/next/development/concepts/rest-api/#how-to-access-rest-api-endpoints",children:"REST endpoint"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"authentication-methods",children:"Authentication methods"}),"\n",(0,i.jsx)(t.p,{children:"There are three possible types of authentication within the authentication service :"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Internal authentication system"})," (default)."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Identity provider"})," : Users database is externalized."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Service provider"})," : The authentication system is completely outsourced."]}),"\n"]}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsx)(t.p,{children:"In all cases, a REGARDS JWT is generated, even with external authentication system. This JWT is used to communicate\ninternally between microservices."})}),"\n",(0,i.jsx)(t.h3,{id:"internal-authentication",children:"Internal authentication"}),"\n",(0,i.jsx)(t.p,{children:"By default, if no authentication system is defined, REGARDS handle his own authentication system based on JWT tokens.\nThis means that user are stored in REGARDS database. Authentication system is manage by REGARDS with an Oauth2 system."}),"\n",(0,i.jsxs)(t.p,{children:["You can see ",(0,i.jsx)(t.a,{href:"https://github.com/RegardsOss/regards-backend/blob/master/rs-cloud/rs-authentication/authentication/authentication-plugins/src/main/java/fr/cnes/regards/modules/authentication/plugins/identityprovider/regards/RegardsInternalAuthenticationPlugin.java",children:"implementation here"})]}),"\n",(0,i.jsx)(t.h3,{id:"identity-provider-service",children:"Identity Provider service"}),"\n",(0,i.jsxs)(t.p,{children:["You can authenticate with a custom IDP (Identity Provider) : Users database is externalized.\nThis operation allow to connect to an LDAP base for example. An identity provider service can be configured through\n",(0,i.jsx)(t.a,{href:"/docs/user-guide/project-configuration/users/ldap/",children:"administrator UI"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"service-provider-service",children:"Service Provider service"}),"\n",(0,i.jsx)(t.p,{children:"You can authenticate with a custom SP (Service Provider) : Authentication system fully externalized. This operation\nallow to connect through external SSO like github for example.\nIn order to do this, you need to"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Configure a service provider through ",(0,i.jsx)(t.a,{href:"/docs/user-guide/project-configuration/users/openid/",children:"administrator UI"}),"."]}),"\n",(0,i.jsx)(t.li,{children:"Connect to external service, and store the returned token."}),"\n",(0,i.jsx)(t.li,{children:"Connect to regards with this external token. Regards will detect that token is not a REGARDS JWT. Regards will verify\ntoken validity by sending a request to configured external authentication service. After verification, a Regards JWT\nis generated and used to fulfill requests."}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["See ",(0,i.jsx)(t.a,{href:"/docs/development/backend/services/authentication/contributor-guides/plugins/",children:"plugin page"})," for more details."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(96540);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);
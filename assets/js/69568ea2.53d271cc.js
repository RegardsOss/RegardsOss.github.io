"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[64901],{4478:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var t=n(74848),o=n(28453);const i={title:"Configuration Importation/Exportation",sidebar_label:"Importation/Exportation",slug:"/development/services/worker-manager/configuration/import_export",sidebar_position:1},s=void 0,a={id:"development/services/worker-manager/configuration/import-export",title:"Configuration Importation/Exportation",description:"The rs-worker-manager configuration is imported or exported in Json format (see in UI",source:"@site/docs/development/services/worker-manager/configuration/import-export.md",sourceDirName:"development/services/worker-manager/configuration",slug:"/development/services/worker-manager/configuration/import_export",permalink:"/docs/development/services/worker-manager/configuration/import_export",draft:!1,unlisted:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/docs/development/services/worker-manager/configuration/import-export.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Configuration Importation/Exportation",sidebar_label:"Importation/Exportation",slug:"/development/services/worker-manager/configuration/import_export",sidebar_position:1},sidebar:"dev",previous:{title:"All endpoints (OpenAPI)",permalink:"/docs/development/services/worker-manager/api-guides/rest/api-swagger"},next:{title:"Static configuration",permalink:"/docs/development/services/worker-manager/configuration/static_configuration"}},d={},c=[{value:"Import/Export API",id:"importexport-api",level:2},{value:"Configurable parameters",id:"configurable-parameters",level:3},{value:"Configuration for worker :",id:"configuration-for-worker-",level:3},{value:"Configuration for workflow of worker :",id:"configuration-for-workflow-of-worker-",level:3},{value:"Example",id:"example",level:3}];function l(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.p,{children:"The rs-worker-manager configuration is imported or exported in Json format (see in UI\nAdministrator : Microservices menu > rs-worker/manager > Manage backups). The configuration is stored in database."}),"\n",(0,t.jsxs)(r.p,{children:["Microservices settings regroup a set of settings that are specific by ",(0,t.jsx)(r.a,{href:"/docs/development/concepts/multitenant/",children:"tenant"}),"\nand stored in the microservice database."]}),"\n",(0,t.jsx)(r.h2,{id:"importexport-api",children:"Import/Export API"}),"\n",(0,t.jsxs)(r.p,{children:["To configure some microservice settings for a specific tenant, you need to follow the ",(0,t.jsx)(r.a,{href:"/docs/development/services/common/common-import-export-configuration",children:"generic Import/Export service\nconfiguration guide"}),", it will help you understand the expected JSON\nfile payload that you can send to the\n",(0,t.jsx)(r.a,{href:"/docs/development/services/worker-manager/api-guides/rest/api-swagger#tag/module-manager-controller/operation/importConfiguration",children:"import configuration endpoint"}),"."]}),"\n",(0,t.jsxs)(r.p,{children:["This configuration can also be imported or exported\nthrough the ",(0,t.jsx)(r.a,{href:"/docs/user-guide/project-configuration/microservices/",children:"administrator UI"}),"."]}),"\n",(0,t.jsx)(r.h3,{id:"configurable-parameters",children:"Configurable parameters"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Name"}),(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Default value"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsx)(r.tbody,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"skipContentTypes"}),(0,t.jsx)(r.td,{children:"List of String"}),(0,t.jsx)(r.td,{}),(0,t.jsx)(r.td,{children:"List of ignored content types by the rs-worker-manager while dispatching requests"})]})})]}),"\n",(0,t.jsx)(r.h3,{id:"configuration-for-worker-",children:"Configuration for worker :"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Name"}),(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"workerType"}),(0,t.jsx)(r.td,{children:"String"}),(0,t.jsx)(r.td,{children:"Worker type (maximum length 128: [a-zA-Z0-9-_.]*)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"contentTypeInputs"}),(0,t.jsx)(r.td,{children:"List of String"}),(0,t.jsx)(r.td,{children:"List of content type in worker input"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"contentTypeOutput"}),(0,t.jsx)(r.td,{children:"String"}),(0,t.jsx)(r.td,{children:"Content type in worker output"})]})]})]}),"\n",(0,t.jsxs)(r.p,{children:["This worker configuration is used in ",(0,t.jsx)(r.code,{children:"rs-worker-manager"})," to determine which content type is accepted by the worker. This\ncontent type output is useful in workflow case."]}),"\n",(0,t.jsx)(r.h3,{id:"configuration-for-workflow-of-worker-",children:"Configuration for workflow of worker :"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Name"}),(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"workflowType"}),(0,t.jsx)(r.td,{children:"String"}),(0,t.jsx)(r.td,{children:"Workflow type (maximum length 256)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"steps"}),(0,t.jsx)(r.td,{children:"-"}),(0,t.jsx)(r.td,{children:"List of steps for a workflow"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"stepNumber"}),(0,t.jsx)(r.td,{children:"Digit"}),(0,t.jsx)(r.td,{children:"Step number in workflow (unique)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"workerType"}),(0,t.jsx)(r.td,{children:"String"}),(0,t.jsx)(r.td,{children:"Worker type (maximum length 128: [a-zA-Z0-9-_.]*)"})]})]})]}),"\n",(0,t.jsxs)(r.p,{children:["This configuration indicate the different steps of the workflow and their order.\nThe parameter ",(0,t.jsx)(r.strong,{children:"contentTypeOutput"})," must be a valid with the parameter ",(0,t.jsx)(r.strong,{children:"contentTypeInput"})," defined in the worker by\nconfiguration (contentTypeOutput worker1 = contentTypeInput worker2 : for valid chaining between the worker1 to the\nworker2)."]}),"\n",(0,t.jsx)(r.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",metastring:"title='rs-worker-manager configuration file example'",children:'{\n  "microservice": "rs-worker-manager",\n  "modules": [\n    {\n      "module": {\n        "id": "workermanager",\n        "name": "Worker Manager module",\n        "description": "Dispatch request to workers",\n        "version": "1.8.0",\n        "author": "REGARDS",\n        "legalOwner": "CNES",\n        "documentation": "https://github.com/RegardsOss"\n      },\n      "resetBeforeImport": true,\n      "configuration": [\n        {\n          "key": "fr.cnes.regards.framework.modules.tenant.settings.domain.DynamicTenantSetting",\n          "value": {\n            "name": "skipContentTypes",\n            "description": "List of content-types to ignore for requests dispatch.",\n            "value": "[]",\n            "defaultValue": "[]",\n            "className": "java.util.ArrayList"\n          }\n        },\n        {\n          "key": "fr.cnes.regards.modules.workermanager.dto.WorkflowConfigDto",\n          "value": {\n            "workflowType": "lta-request",\n            "steps": [\n              {\n                "stepNumber": 1,\n                "workerType": "lta-product-zip-extraction-worker"\n              },\n              {\n                "stepNumber": 2,\n                "workerType": "lta-sip-generator-worker"\n              }\n            ]\n          }\n        },\n        {\n          "key": "fr.cnes.regards.modules.workermanager.dto.WorkerConfigDto",\n          "value": {\n            "workerType": "lta-product-zip-extraction-worker",\n            "contentTypeInputs": [\n              "lta-to-extract-request"\n            ],\n            "contentTypeOutput": "lta-extracted-request"\n          }\n        },\n        {\n          "key": "fr.cnes.regards.modules.workermanager.dto.WorkerConfigDto",\n          "value": {\n            "workerType": "lta-sip-generator-worker",\n            "contentTypeInputs": [\n              "lta-extracted-request"\n            ]\n          }\n        },\n        {\n          "key": "fr.cnes.regards.modules.workermanager.dto.WorkerConfigDto",\n          "value": {\n            "workerType": "delete-files-worker",\n            "contentTypeInputs": [\n              "delete-files-request"\n            ]\n          }\n        }\n      ]\n    }\n  ]\n}\n'})})]})}function p(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>a});var t=n(96540);const o={},i=t.createContext(o);function s(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);
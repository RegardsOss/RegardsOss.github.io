"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[79073],{88487:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var n=o(74848),r=o(28453);const i={id:"backend-downloader-overview",title:"REGARDS downloader microservice",sidebar_label:"Overview",sidebar_position:1,slug:"/development/backend/services/downloader/overview/"},t=void 0,c={id:"development/services/downloader/backend-downloader-overview",title:"REGARDS downloader microservice",description:"The Downloader or rs-downloader microservice is an integral part of the functional",source:"@site/docs/development/services/downloader/overview.md",sourceDirName:"development/services/downloader",slug:"/development/backend/services/downloader/overview/",permalink:"/docs/next/development/backend/services/downloader/overview/",draft:!1,unlisted:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/docs/development/services/downloader/overview.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"backend-downloader-overview",title:"REGARDS downloader microservice",sidebar_label:"Overview",sidebar_position:1,slug:"/development/backend/services/downloader/overview/"},sidebar:"dev",previous:{title:"Metrics",permalink:"/docs/next/development/services/delivery/metrics/"},next:{title:"How it works",permalink:"/docs/next/development/services/downloader/conception/"}},d={},l=[{value:"How to use",id:"how-to-use",level:2},{value:"Plugins",id:"plugins",level:2},{value:"How to configure",id:"how-to-configure",level:2},{value:"How to access source code",id:"how-to-access-source-code",level:2}];function a(e){const s={a:"a",h2:"h2",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.strong,{children:"Downloader"})," or ",(0,n.jsx)(s.strong,{children:"rs-downloader"})," microservice is an integral part of the functional\ngroup ",(0,n.jsx)(s.a,{href:"/docs/next/development/functional-overview/microservices-restitution/",children:"Restitution services"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"rs-downloader"})," is the service that manages downloads of products files."]}),"\n",(0,n.jsxs)(s.p,{children:["The downloader microservice can handle online and nearline storage locations. To do so, it uses the same plugins as the ",(0,n.jsx)(s.a,{href:"/docs/next/development/backend/services/storage/overview/",children:"storage microservices"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"Its main responsibilities are:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Downloading files"}),"\n",(0,n.jsx)(s.li,{children:"Manage user download quotas"}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["Unlike other microservices, the Downloader microservice is not intended to be accessed directly by users. The REST APIs are\nmainly private.\nInstead, file download requests are handled by the ",(0,n.jsx)(s.a,{href:"/docs/next/development/backend/services/order/overview/",children:"Order"})," microservice or\nthe ",(0,n.jsx)(s.a,{href:"/docs/next/development/backend/services/catalog/overview/",children:"Catalog"})," microservice.\nThe stored files cannot be accessed through the API because the files access rights are not managed by the downloader\nmicroservice but by the ",(0,n.jsx)(s.a,{href:"/docs/next/development/services/dam/overview/",children:"Data Manager"})," and ",(0,n.jsx)(s.a,{href:"/docs/next/development/backend/services/catalog/overview/",children:"Catalog"})," microservices."]}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.strong,{children:"Downloader"})," microservice depends on ",(0,n.jsx)(s.a,{href:"/docs/next/development/services/storage/plugins/overview",children:"storage plugins"}),", which serve as interfaces between the microservice and the downloader\nsystem in use (local, online, or nearline)."]}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Concept"}),(0,n.jsx)(s.th,{children:"Compatibility"}),(0,n.jsx)(s.th,{children:"Description"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.a,{href:"/docs/next/development/concepts/multitenant/",children:"Multitenant"})}),(0,n.jsx)(s.td,{children:"Yes"}),(0,n.jsx)(s.td,{children:"Can handle multiple tenants/projects"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.a,{href:"/docs/next/development/concepts/scalability/#vertical-scalability",children:"Vertical scalability"})}),(0,n.jsx)(s.td,{children:"No"}),(0,n.jsx)(s.td,{children:"Service does not use Jobs system"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.a,{href:"/docs/next/development/concepts/scalability/#horizontal-scalability",children:"Horizontal scalability"})}),(0,n.jsx)(s.td,{children:"Yes"}),(0,n.jsx)(s.td,{children:"Service can be deployed with multiple instances"})]})]})]}),"\n",(0,n.jsxs)(s.p,{children:["You can learn how the service works with the ",(0,n.jsx)(s.a,{href:"/docs/next/development/services/downloader/conception/",children:"conception section"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,n.jsxs)(s.p,{children:["You can learn how to ",(0,n.jsx)(s.strong,{children:"operate"})," the microservice using the ",(0,n.jsx)(s.strong,{children:"API Guides"})," :"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Browse"})," all ",(0,n.jsx)(s.a,{href:"/docs/next/development/backend/services/downloader/api-swagger",children:"REST API available endpoints"}),"."]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"plugins",children:"Plugins"}),"\n",(0,n.jsxs)(s.p,{children:["A storage location plugin serves as the interface between the microservice and the actual storage space (COTS).\nSee the ",(0,n.jsx)(s.a,{href:"/docs/next/development/services/storage/plugins/overview",children:"Storage plugins section"})," to learn more about the available storage location plugins and how to\nconfigure them."]}),"\n",(0,n.jsx)(s.h2,{id:"how-to-configure",children:"How to configure"}),"\n",(0,n.jsxs)(s.p,{children:["There is no configuration dedicated to the downloder microservice. Storages locations are configured through ",(0,n.jsx)(s.a,{href:"/docs/next/development/backend/services/storage/overview/#how-to-configure",children:"storage microservice"})]}),"\n",(0,n.jsx)(s.h2,{id:"how-to-access-source-code",children:"How to access source code"}),"\n",(0,n.jsxs)(s.p,{children:["Microservice source code is available\non ",(0,n.jsx)(s.a,{href:"https://github.com/RegardsOss/regards-backend/tree/master/rs-storage",children:"GitHub"}),". The source code is the same as the storage service.\nThe only difference is the bootstrap module with a specific downloader active profile to enable or disable REST and AMQP controllers."]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},28453:(e,s,o)=>{o.d(s,{R:()=>t,x:()=>c});var n=o(96540);const r={},i=n.createContext(r);function t(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);
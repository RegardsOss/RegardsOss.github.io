"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[38772],{15680:(e,n,r)=>{r.d(n,{xA:()=>p,yg:()=>d});var t=r(96540);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),l=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},p=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=l(r),m=o,d=u["".concat(c,".").concat(m)]||u[m]||g[m]||i;return r?t.createElement(d,s(s({ref:n},p),{},{components:r})):t.createElement(d,s({ref:n},p))}));function d(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,s=new Array(i);s[0]=m;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a[u]="string"==typeof e?e:o,s[1]=a;for(var l=2;l<i;l++)s[l]=r[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},57718:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var t=r(58168),o=(r(96540),r(15680));const i={id:"frontend-packages-business-components-microservice-plugin",title:"Microservice plugin configurator",sidebar_label:"Microservice plugin configurator",slug:"/development/frontend/packages/business-components/microservice-plugin-configurator/"},s=void 0,a={unversionedId:"development/frontend/components/business/frontend-packages-business-components-microservice-plugin",id:"version-1.12.0/development/frontend/components/business/frontend-packages-business-components-microservice-plugin",title:"Microservice plugin configurator",description:"Description",source:"@site/versioned_docs/version-1.12.0/development/frontend/components/business/microservice-plugin-configurator.md",sourceDirName:"development/frontend/components/business",slug:"/development/frontend/packages/business-components/microservice-plugin-configurator/",permalink:"/docs/1.12.0/development/frontend/packages/business-components/microservice-plugin-configurator/",draft:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/versioned_docs/version-1.12.0/development/frontend/components/business/microservice-plugin-configurator.md",tags:[],version:"1.12.0",frontMatter:{id:"frontend-packages-business-components-microservice-plugin",title:"Microservice plugin configurator",sidebar_label:"Microservice plugin configurator",slug:"/development/frontend/packages/business-components/microservice-plugin-configurator/"},sidebar:"dev",previous:{title:"Overview - Business components",permalink:"/docs/1.12.0/development/frontend/packages/business-components/"},next:{title:"Overview - Lazy modules",permalink:"/docs/1.12.0/development/frontend/packages/lazy-modules/"}},c={},l=[{value:"Description",id:"description",level:3},{value:"PluginFormContainer",id:"pluginformcontainer",level:3},{value:"PluginListContainer",id:"pluginlistcontainer",level:3}],p={toc:l},u="wrapper";function g(e){let{components:n,...r}=e;return(0,o.yg)(u,(0,t.A)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h3",{id:"description"},"Description"),(0,o.yg)("p",null,"This business component is common standard tool to render a configurator form for any plugin of any microservice.",(0,o.yg)("br",{parentName:"p"}),"\n","This component uses the standard plugin API of any microservice to retrieve plugins meta informations needed for configuration."),(0,o.yg)("h3",{id:"pluginformcontainer"},"PluginFormContainer"),(0,o.yg)("p",null,"Component to display a plugin form editor"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-jsx"},"import { PluginFormContainer } from '@regardsoss/microservice-plugin-configurator'\nimport { DataManagementShapes } from '@regardsoss/shape'\n\nexport class ExampleContainer extends React.component {\n\n    static propTypes = {}\n    \n    render() {\n        return (\n            <PluginFormContainer\n                microserviceName='rs-catalog' // Microservice of the plugin to configure\n                pluginId='' // Plugin unique identifier to configure\n                pluginConfigurationId='' // Only for edition of an existing plugin configuration\n                formMode='create||edit||copy'\n                backUrl='' // Return route (back button on editor bottom)\n            />\n        )\n    }\n}\n")),(0,o.yg)("h3",{id:"pluginlistcontainer"},"PluginListContainer"),(0,o.yg)("p",null,"Component to display a select field containing all possible plugin implemtations of a given plugin type."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-jsx"},"import { PluginFormContainer } from '@regardsoss/microservice-plugin-configurator'\nimport { DataManagementShapes } from '@regardsoss/shape'\n\nexport class ExampleContainer extends React.component {\n\n    static propTypes = {}\n    \n    onPluginSelection = (pluginDefinition) => {\n        console.info('selected plugin',pluginDefinition.id)\n    }\n    \n    render() {\n        return (\n            <PluginListContainer\n                title='' // Title of the list\n                selectLabel='' // Hint text of the select field\n                microserviceName='rs-catalog' // Microservice of the plugin type\n                pluginType='' // Plugin type\n                selectedPluginId='' // Default selected plugin identifier\n                handleSelect={this.onPluginSelection} // Function callback when a plugin implemtentation is selected.\n                errorText='' // error message to display on top of the list or null if no error.\n            />\n        )\n    }\n}\n")))}g.isMDXComponent=!0}}]);
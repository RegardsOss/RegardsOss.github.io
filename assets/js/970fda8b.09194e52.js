"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[24610],{10792:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var o=r(74848),s=r(28453);const i={title:"Worker setup",slug:"/setup/swarm/advanced/worker-setup",sidebar_position:2.6},t=void 0,a={id:"setup/swarm/advanced/swarm-worker",title:"Worker setup",description:"This guide allows you to deploy a worker thanks to your inventory.",source:"@site/versioned_docs/version-2.0.0/setup/swarm/advanced/swarm-worker.md",sourceDirName:"setup/swarm/advanced",slug:"/setup/swarm/advanced/worker-setup",permalink:"/docs/setup/swarm/advanced/worker-setup",draft:!1,unlisted:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/versioned_docs/version-2.0.0/setup/swarm/advanced/swarm-worker.md",tags:[],version:"2.0.0",sidebarPosition:2.6,frontMatter:{title:"Worker setup",slug:"/setup/swarm/advanced/worker-setup",sidebar_position:2.6},sidebar:"install",previous:{title:"Plugin setup",permalink:"/docs/setup/swarm/advanced/plugin-setup"},next:{title:"Logging stack",permalink:"/docs/setup/swarm/advanced/logging-stack/"}},c={},d=[{value:"Basic production ready example",id:"basic-production-ready-example",level:3},{value:"Configure volumes",id:"configure-volumes",level:3},{value:"Environment variables",id:"environment-variables",level:3},{value:"Mount configs and secrets to workers",id:"mount-configs-and-secrets-to-workers",level:3},{value:"Worker Configuration",id:"worker-configuration",level:3},{value:"Ports",id:"ports",level:3},{value:"Docker image customisation",id:"docker-image-customisation",level:3},{value:"Prometheus",id:"prometheus",level:3}];function l(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["This guide allows you to deploy a ",(0,o.jsx)(n.a,{href:"/docs/development/concepts/workers/",children:"worker"})," thanks to your inventory."]}),"\n",(0,o.jsx)(n.admonition,{title:"Workers Configuration",type:"info",children:(0,o.jsxs)(n.p,{children:["Edit your inventory file ",(0,o.jsx)(n.code,{children:"inventories/<your inventory>/group_vars/regards_nodes/workers.yml"})," to configure workers\ninformation"]})}),"\n",(0,o.jsxs)(n.p,{children:["The following configuration deploys 1 worker with image name ",(0,o.jsx)(n.code,{children:"xxx-worker"})," and image tag ",(0,o.jsx)(n.code,{children:"group_docker_tags.workers"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="Minimal worker configuration"',children:'# WORKERS\ngroup_docker_workers:\n  - name: xxx-worker\n    replicas: 1\n    tag: "{{ group_docker_tags.workers }}"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"basic-production-ready-example",children:"Basic production ready example"}),"\n",(0,o.jsx)(n.p,{children:"You should consider the following as a ready to production minimal example :"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["a ",(0,o.jsx)(n.a,{href:"/docs/setup/swarm/advanced/placement-constraint",children:"node placement constraint"}),", to avoid this worker to boot on the logging server for example"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#prometheus",children:"prometheus metrics REST API"})," available on port ",(0,o.jsx)(n.code,{children:"9093"})," exposed"]}),"\n",(0,o.jsxs)(n.li,{children:["ressource limit defined (see ",(0,o.jsx)(n.a,{href:"https://docs.docker.com/reference/compose-file/deploy/#resources",children:"Docker compose specification"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:["healthcheck defined (with environment variables ",(0,o.jsx)(n.code,{children:"THC_PORT"})," and ",(0,o.jsx)(n.code,{children:"THC_PATH"})," required\nby ",(0,o.jsx)(n.a,{href:"https://paketo.io/",children:"paketo Buildpack"}),")"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="Ready to production minimal worker configuration"',children:"# WORKERS\ngroup_docker_workers:\n  - name: xxx-worker\n    replicas: 1\n    tag: \"{{ group_docker_tags.workers }}\"\n    node_label_placement_constraint:\n      key: type\n      value: yyyyy\n    prometheus:\n      port: 9093\n    resources:\n      limits:\n        cpus: '1'\n        memory: 900m\n        pids: 100000\n    healthcheck:\n      test: [ 'CMD', '/layers/paketo-buildpacks_health-checker/thc/bin/thc' ]\n      interval: 30s\n      timeout: 10s\n      retries: 10\n      start_period: 2m\n    configuration:\n      environment:\n        THC_PORT: 9093\n        THC_PATH: /actuator/health\n"})}),"\n",(0,o.jsx)(n.h3,{id:"configure-volumes",children:"Configure volumes"}),"\n",(0,o.jsxs)(n.p,{children:["By default, Docker Swarm will create you a ",(0,o.jsx)(n.code,{children:"tmpfs"})," montage on ",(0,o.jsx)(n.code,{children:"/tmp"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["If you want to mount additional volumes, you can follow the same documentation as any REGARDS service.",(0,o.jsx)(n.br,{}),"\n","Check the ",(0,o.jsx)(n.a,{href:"/docs/setup/swarm/advanced/swarm-mount#mount-volume-to-services",children:"documentation"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="Ready to production minimal worker configuration"',children:'# WORKERS\ngroup_docker_workers:\n  - name: xxx-worker\n    replicas: 5\n    volumes:\n      # direct mount from the VM\n      - source: /nfs\n        destination: /nfs\n      # Also a direct mount from the VM\n      # Usefull to create a local workspace from the VM disk\n      # Be careful you may have all 5 replicas working on the same VM disk (check REPLICATION_INSTANCE_ID environnement variable)\n      - source: "{{ group_workdir_local }}{{ group_stack_name }}/workspace/regards/workers/swot-file-extraction-worker/workspace"\n        destination: /workspace\n        create: true\n      # Example of named volume - must refer to a volume defined inside mounts.yml\n      - source: regards-xxx-worker-volume\n        destination: /config\n'})}),"\n",(0,o.jsx)(n.h3,{id:"environment-variables",children:"Environment variables"}),"\n",(0,o.jsxs)(n.p,{children:["By default, Docker Swarm will give you the value of the ",(0,o.jsx)(n.code,{children:"{{.Task.Slot}}"})," inside the environment\nvariable ",(0,o.jsx)(n.code,{children:"REPLICATION_INSTANCE_ID"}),"."]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsx)(n.p,{children:"This value is commonly used to create a custom local workspace, as this value is different for every worker."})}),"\n",(0,o.jsx)(n.p,{children:"You can add your custom environment variables like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# WORKERS\ngroup_docker_workers:\n  - name: xxx-worker\n    configuration:\n      environment:\n        CUSTOM_ENV: <custom value>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"mount-configs-and-secrets-to-workers",children:"Mount configs and secrets to workers"}),"\n",(0,o.jsxs)(n.p,{children:["If you want to mount some config and/or secrets to your worker, you can follow the same documentation as any REGARDS\nservice.",(0,o.jsx)(n.br,{}),"\n","Check the ",(0,o.jsx)(n.a,{href:"/docs/setup/swarm/advanced/swarm-mount#mount-configs-and-secrets-to-services",children:"documentation"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'{1,7-8} title="Config file on worker example"',children:"# Ensure the config file ALTITUDE_GRILLE_GAUSS.yml is defined inside mounts.yml\n\n# WORKERS\ngroup_docker_workers:\n  - name: xxx-worker\n    configs:\n      - source: ALTITUDE_GRILLE_GAUSS.yml\n        destination: /worker/workspace/datatypes/ALTITUDE_GRILLE_GAUSS.yml\n    secrets:\n    # same API\n"})}),"\n",(0,o.jsx)(n.h3,{id:"worker-configuration",children:"Worker Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["The REGARDS team also creates their own workers with a Java + Spring cloud stream core. ",(0,o.jsx)(n.em,{children:"This core is not yet\nopen-source."}),(0,o.jsx)(n.br,{}),"\n","To allow such workers to use the ",(0,o.jsx)(n.a,{href:"/docs/development/backend/services/config/overview/",children:"rs-config"})," microservice API, we've\ncreated a special ",(0,o.jsx)(n.code,{children:"config"})," property on the worker definition that allows to :"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"create a configuration file inside rs-config files"}),"\n",(0,o.jsxs)(n.li,{children:["mount this file inside ",(0,o.jsx)(n.code,{children:"/tmp/{{ worker.name }}.yml"})," inside the container."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'# WORKERS\ngroup_docker_workers:\n  - name: xxx-worker\n    config:\n      worker:\n        tenants: "{{ global_regards.project_name }}"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The generated file attached to the  ",(0,o.jsx)(n.a,{href:"/docs/development/backend/services/config/overview/",children:"rs-config"})," and the worker would\nlook like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"worker:\n  tenants: project1\n"})}),"\n",(0,o.jsx)(n.admonition,{title:"When to use it?",type:"info",children:(0,o.jsxs)(n.p,{children:["If you do plan to deploy a Java REGARDS worker, you should prefer\nto ",(0,o.jsx)(n.a,{href:"#mount-configs-and-secrets-to-workers",children:"mount a basic config file instead"})]})}),"\n",(0,o.jsx)(n.h3,{id:"ports",children:"Ports"}),"\n",(0,o.jsx)(n.p,{children:"You can mount any port like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'# WORKERS\ngroup_docker_workers:\n  - name: xxx-worker\n    ports:\n      - "8080:8080"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["If you deploy a Java worker build using ",(0,o.jsx)(n.a,{href:"https://paketo.io/",children:"paketo Buildpack"}),", you can use open the ",(0,o.jsx)(n.code,{children:"jdwp"})," port like\nthis, as it also provides the ",(0,o.jsx)(n.code,{children:"BPL_DEBUG_ENABLED=true"})," environment variable:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'# WORKERS\ngroup_docker_workers:\n  - name: xxx-worker\n    ports:\n      - "8080:8080"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"docker-image-customisation",children:"Docker image customisation"}),"\n",(0,o.jsxs)(n.p,{children:["By default, the Docker registry hosting your worker image will be the same as the one defined\nin ",(0,o.jsx)(n.code,{children:"group_docker_stack_domain"}),".\nAlso, the worker image name is retrieved from the ",(0,o.jsx)(n.code,{children:"name"})," value (",(0,o.jsx)(n.code,{children:"xxx-worker"})," in this documentation)."]}),"\n",(0,o.jsx)(n.p,{children:"You can override these configurations like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="Example that fetches an image named nexus.mycompany.fr/yyy-worker:1.0"',children:"# WORKERS\ngroup_docker_workers:\n  - name: xxx-worker\n    # Stop using group_docker_stack_domain value\n    docker_registry: nexus.mycompany.fr\n    # Stop using name attribute value (here xxx-worker), but yyy-worker\n    image: yyy-worker\n    tag: 1.0\n"})}),"\n",(0,o.jsx)(n.admonition,{title:"Image parameter",type:"danger",children:(0,o.jsxs)(n.p,{children:["Do not override the image name if you have defined the ",(0,o.jsx)(n.code,{children:"config"})," property (\nsee ",(0,o.jsx)(n.a,{href:"#worker-configuration",children:"Worker Configuration"}),").",(0,o.jsx)(n.br,{}),"\n","Use ",(0,o.jsx)(n.code,{children:"image"})," parameter wisely, only when required."]})}),"\n",(0,o.jsx)(n.h3,{id:"prometheus",children:"Prometheus"}),"\n",(0,o.jsxs)(n.p,{children:["When you configure the prometheus configuration object inside a worker, you are configuring how the Prometheus service\nwill reach your worker to fetch metrics.",(0,o.jsx)(n.br,{}),"\n","The value provided here is only used to create the Prometheus configuration file."]}),"\n",(0,o.jsxs)(n.p,{children:["You can define the prometheus port and the ",(0,o.jsx)(n.code,{children:"metrics_path"}),". If you do provide a port but not the ",(0,o.jsx)(n.code,{children:"metrics_path"}),"\nparameter, default value will be ",(0,o.jsx)(n.code,{children:"/actuator/prometheus"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="Prometheus will query all instances of xxx-worker with URL xxx-worker:9093/metrics"',children:"# WORKERS\ngroup_docker_workers:\n  - name: xxx-worker\n    prometheus:\n      port: 9093\n      metrics_path: /metrics\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var o=r(96540);const s={},i=o.createContext(s);function t(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);
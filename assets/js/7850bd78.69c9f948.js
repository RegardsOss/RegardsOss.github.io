"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[2234],{91977:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var i=t(74848),s=t(28453);const r={id:"backend-authentication-plugins",title:"Authentication plugins",sidebar_label:"Available plugins",slug:"/development/backend/services/authentication/contributor-guides/plugins/"},a=void 0,o={id:"development/services/authentication/plugins/backend-authentication-plugins",title:"Authentication plugins",description:"This extension point allows to define an authentication protocol.",source:"@site/docs/development/services/authentication/plugins/authentication-plugins.md",sourceDirName:"development/services/authentication/plugins",slug:"/development/backend/services/authentication/contributor-guides/plugins/",permalink:"/docs/development/backend/services/authentication/contributor-guides/plugins/",draft:!1,unlisted:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/docs/development/services/authentication/plugins/authentication-plugins.md",tags:[],version:"current",frontMatter:{id:"backend-authentication-plugins",title:"Authentication plugins",sidebar_label:"Available plugins",slug:"/development/backend/services/authentication/contributor-guides/plugins/"},sidebar:"dev",previous:{title:"Static configuration",permalink:"/docs/development/backend/services/authentication/configuration/static-configuration"},next:{title:"Overview",permalink:"/docs/development/backend/services/config/overview/"}},c={},d=[{value:"Identity provider",id:"identity-provider",level:2},{value:"Service Provider",id:"service-provider",level:2}];function l(e){const n={a:"a",admonition:"admonition",h2:"h2",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.p,{children:"This extension point allows to define an authentication protocol."}),(0,i.jsx)(n.p,{children:"By default, if no authentication system is defined, REGARDS handles its own authentication system based on JWT tokens. However, it is possible to externalize user management with IDP and/or SP."})]}),"\n",(0,i.jsx)(n.admonition,{title:"developers advice",type:"info",children:(0,i.jsx)(n.p,{children:"If you want to create your own implementation of one of these extension points, you need to extend the specific\ninterface indicated."})}),"\n",(0,i.jsx)(n.h2,{id:"identity-provider",children:"Identity provider"}),"\n",(0,i.jsx)(n.p,{children:"Authentication system managed by REGARDS which user base is deported on an external base. This operation allows to connect to an LDAP base for example."}),"\n",(0,i.jsxs)(n.p,{children:["All the following plugins implements\nthe ",(0,i.jsx)(n.a,{href:"https://github.com/RegardsOss/regards-backend/blob/master/rs-cloud/rs-authentication/authentication/authentication-domain/src/main/java/fr/cnes/regards/modules/authentication/domain/plugin/IAuthenticationPlugin.java",children:"IAuthenticationPlugin interface"})]}),"\n",(0,i.jsx)(n.p,{children:"REGARDS provides many implementations of this extension point :"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Plugin image"}),(0,i.jsx)(n.th,{children:"Plugin name"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Already"})," provided ",(0,i.jsx)("br",{}),"inside the microservice"]}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://github.com/RegardsOss/regards-backend/blob/master/rs-cloud/rs-authentication/authentication/authentication-plugins/src/main/java/fr/cnes/regards/modules/authentication/plugins/identityprovider/regards/RegardsInternalAuthenticationPlugin.java",children:"RegardsInternalAuthenticationPlugin"})}),(0,i.jsx)(n.td,{children:"Authenticate users with internal managed accounts"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Already"})," provided ",(0,i.jsx)("br",{}),"inside the microservice"]}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://github.com/RegardsOss/regards-backend/blob/master/rs-cloud/rs-authentication/authentication/authentication-plugins/src/main/java/fr/cnes/regards/modules/authentication/plugins/identityprovider/ldap/LdapAuthenticationPlugin.java",children:"LdapAuthenticationPlugin"})}),(0,i.jsx)(n.td,{children:"Authenticate users through a configured LDAP server"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"service-provider",children:"Service Provider"}),"\n",(0,i.jsx)(n.p,{children:"Authentication system fully externalized. This operation allows to connect through external SSO like github for example."}),"\n",(0,i.jsxs)(n.p,{children:["All the following plugins implements\nthe ",(0,i.jsx)(n.a,{href:"https://github.com/RegardsOss/regards-backend/blob/master/rs-cloud/rs-authentication/authentication/authentication-domain/src/main/java/fr/cnes/regards/modules/authentication/domain/plugin/IServiceProviderPlugin.java",children:"IServiceProviderPlugin interface"})]}),"\n",(0,i.jsx)(n.p,{children:"REGARDS provides one implementation of this extension point :"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Plugin image"}),(0,i.jsx)(n.th,{children:"Plugin name"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Already"})," provided ",(0,i.jsx)("br",{}),"inside the microservice"]}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://github.com/RegardsOss/regards-backend/blob/master/rs-cloud/rs-authentication/authentication/authentication-plugins/src/main/java/fr/cnes/regards/modules/authentication/plugins/serviceprovider/openid/OpenIdConnectPlugin.java",children:"OpenIdConnectPlugin"})}),(0,i.jsx)(n.td,{children:"Authenticate users through a configured OpenID Connect server"})]})})]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(96540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);
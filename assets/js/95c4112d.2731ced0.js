"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[66308],{29442:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});var n=s(74848),t=s(28453);const l={title:"Plugins",sidebar_label:"Available plugins",slug:"/development/services/storage/plugins/overview",sidebar_position:1},o=void 0,r={id:"development/services/storage/plugins/overview",title:"Plugins",description:"As described in the conception section, the storage microservice delegates actual storage actions (",source:"@site/docs/development/services/storage/plugins/overview.md",sourceDirName:"development/services/storage/plugins",slug:"/development/services/storage/plugins/overview",permalink:"/docs/development/services/storage/plugins/overview",draft:!1,unlisted:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/docs/development/services/storage/plugins/overview.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Plugins",sidebar_label:"Available plugins",slug:"/development/services/storage/plugins/overview",sidebar_position:1},sidebar:"dev",previous:{title:"All endpoints (OpenAPI)",permalink:"/docs/development/backend/services/storage/api-swagger"},next:{title:"Local",permalink:"/docs/development/services/storage/plugins/local"}},a={},c=[{value:"Online storage location plugins",id:"online-storage-location-plugins",level:2},{value:"Nearline storage location plugins",id:"nearline-storage-location-plugins",level:2},{value:"File Naming Strategy",id:"file-naming-strategy",level:2},{value:"Allow physical deletion of files",id:"allow-physical-deletion-of-files",level:2}];function d(e){const i={a:"a",admonition:"admonition",h2:"h2",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(i.p,{children:["As described in the ",(0,n.jsx)(i.a,{href:"/docs/development/services/storage/conception/",children:"conception section"}),", the storage microservice delegates actual storage actions (\ne.g., copy, retrieval) to plugins that serve as interfaces with the physical storage (COTS)."]}),"\n",(0,n.jsx)(i.admonition,{title:"Developer's Advice",type:"info",children:(0,n.jsx)(i.p,{children:"If you want to create your own implementation of one of these extension points, you need to extend the specific\ninterface indicated."})}),"\n",(0,n.jsx)(i.h2,{id:"online-storage-location-plugins",children:"Online storage location plugins"}),"\n",(0,n.jsxs)(i.p,{children:["All the following plugins implements\nthe ",(0,n.jsx)(i.a,{href:"https://github.com/RegardsOss/regards-backend/blob/master/rs-file-access/file-access-plugin/file-access-plugin-domain/src/main/java/fr/cnes/regards/modules/fileaccess/plugin/domain/IOnlineStorageLocation.java",children:"IOnlineStorageLocation interface"}),"."]}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{children:"Plugin image"}),(0,n.jsx)(i.th,{children:"Plugin name"}),(0,n.jsx)(i.th,{children:"Description"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"local-storage-location-plugin"}),(0,n.jsx)(i.td,{children:"Local"}),(0,n.jsx)(i.td,{children:"Stores the files on the file system were REGARDS is deployed (uses the file:// protocol)"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"s3-storage-plugin"}),(0,n.jsx)(i.td,{children:"S3"}),(0,n.jsx)(i.td,{children:"Stores the files on an Amazon S3 Tier 2 server."})]})]})]}),"\n",(0,n.jsx)(i.h2,{id:"nearline-storage-location-plugins",children:"Nearline storage location plugins"}),"\n",(0,n.jsxs)(i.p,{children:["All the following plugins implements\nthe ",(0,n.jsx)(i.a,{href:"https://github.com/RegardsOss/regards-backend/blob/master/rs-file-access/file-access-plugin/file-access-plugin-domain/src/main/java/fr/cnes/regards/modules/fileaccess/plugin/domain/INearlineStorageLocation.java",children:"INearlineStorageLocation interface"}),"."]}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{children:"Plugin image"}),(0,n.jsx)(i.th,{children:"Plugin name"}),(0,n.jsx)(i.th,{children:"Description"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"s3-storage-plugin"}),(0,n.jsx)(i.td,{children:"S3Glacier"}),(0,n.jsx)(i.td,{children:"Stores the files on an Amazon S3 Tier 3 (glacier) server."})]})})]}),"\n",(0,n.jsx)(i.h2,{id:"file-naming-strategy",children:"File Naming Strategy"}),"\n",(0,n.jsxs)(i.p,{children:["Each storage plugin has a parameter named ",(0,n.jsx)(i.strong,{children:"File Naming Strategy"}),". There are two options for defining how files are\nnamed when they are stored:"]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"CHECKSUM"}),": This is the default option. The file will be stored using its checksum as the name."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"FILENAME"}),": The file will be stored using its original name."]}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"allow-physical-deletion-of-files",children:"Allow physical deletion of files"}),"\n",(0,n.jsxs)(i.p,{children:["Each storage plugin has a parameter named ",(0,n.jsx)(i.strong,{children:"Allow physical deletion of files"}),'. If set to false, when a file is "\ndeleted," it will only be removed from the microservice database and won\'t actually be deleted from the storage. The\nfile will be unknown to REGARDS but will still exist physically.']})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,i,s)=>{s.d(i,{R:()=>o,x:()=>r});var n=s(96540);const t={},l=n.createContext(t);function o(e){const i=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(l.Provider,{value:i},e.children)}}}]);
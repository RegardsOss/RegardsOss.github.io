"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[24834],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(r),f=i,m=u["".concat(l,".").concat(f)]||u[f]||d[f]||a;return r?n.createElement(m,o(o({ref:t},p),{},{components:r})):n.createElement(m,o({ref:t},p))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:i,o[1]=c;for(var s=2;s<a;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},31351:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var n=r(87462),i=(r(67294),r(3905));const a={id:"backend-notifier-architecture",title:"RS-NOTIFIER architecture",sidebar_label:"Architecture",slug:"/development/backend/services/notifier/architecture/"},o=void 0,c={unversionedId:"development/backend/regards/notifier/backend-notifier-architecture",id:"version-1.15/development/backend/regards/notifier/backend-notifier-architecture",title:"RS-NOTIFIER architecture",description:"Notifier responsibilities:",source:"@site/versioned_docs/version-1.15/development/backend/regards/notifier/architecture.md",sourceDirName:"development/backend/regards/notifier",slug:"/development/backend/services/notifier/architecture/",permalink:"/docs/development/backend/services/notifier/architecture/",draft:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/versioned_docs/version-1.15/development/backend/regards/notifier/architecture.md",tags:[],version:"1.15",frontMatter:{id:"backend-notifier-architecture",title:"RS-NOTIFIER architecture",sidebar_label:"Architecture",slug:"/development/backend/services/notifier/architecture/"},sidebar:"dev",previous:{title:"Overview",permalink:"/docs/development/backend/services/notifier/overview/"},next:{title:"Publish a request",permalink:"/docs/development/backend/services/notifier/guides/amqp/publish-notifier"}},l={},s=[],p={toc:s},u="wrapper";function d(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Notifier")," responsibilities:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Manage rules and recipients configuration,"),(0,i.kt)("li",{parentName:"ul"},"Send notifications to external users or components according to its configuration.")),(0,i.kt)("p",null,"At the moment, 2 API are available :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A REST API to manage configuration,"),(0,i.kt)("li",{parentName:"ul"},"A messaging API (",(0,i.kt)("a",{parentName:"li",href:"https://www.amqp.org/"},"AMQP"),") for the receipt of the requests to be processed.")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Notifier architectural concepts",src:r(15950).Z,width:"1135",height:"395"})),(0,i.kt)("p",null,"This microservice receives requests from ",(0,i.kt)("inlineCode",{parentName:"p"},"Feature manager")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Ingest"),"."),(0,i.kt)("p",null,"All requests are then processed as they arrive:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"All rules are applied to all requests in order to identify target recipients,"),(0,i.kt)("li",{parentName:"ul"},"Notifications are then sent to these recipients.")),(0,i.kt)("p",null,"Under the hood, all the real work is done by the ",(0,i.kt)("strong",{parentName:"p"},"plugins"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Plugins to manage the rules for dispatching notifications by recipients,"),(0,i.kt)("li",{parentName:"ul"},"Plugins to make the notification.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Format of the notification is totally free as the notification is fully delegated to a plugin.")))}d.isMDXComponent=!0},15950:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/architectural_concepts_notifier-a9ed0cce1c798f8d93bf20170fa9fe97.png"}}]);
"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[56923],{4790:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var t=n(74848),i=n(28453);const o={id:"backend-framework-modules-jobs",title:"Jobs",sidebar_label:"Jobs",sidebar_position:2,slug:"/development/backend/framework/modules/jobs/"},r=void 0,a={id:"development/framework/modules/backend-framework-modules-jobs",title:"Jobs",description:"Jobs module allows to execute tasks in parallel on several microservices.",source:"@site/versioned_docs/version-2.0.0/development/framework/modules/jobs.md",sourceDirName:"development/framework/modules",slug:"/development/backend/framework/modules/jobs/",permalink:"/docs/development/backend/framework/modules/jobs/",draft:!1,unlisted:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/versioned_docs/version-2.0.0/development/framework/modules/jobs.md",tags:[],version:"2.0.0",sidebarPosition:2,frontMatter:{id:"backend-framework-modules-jobs",title:"Jobs",sidebar_label:"Jobs",sidebar_position:2,slug:"/development/backend/framework/modules/jobs/"},sidebar:"dev",previous:{title:"Database Migration",permalink:"/docs/development/framework/modules/generate-db-migration"},next:{title:"Multitenant",permalink:"/docs/development/framework/modules/multitenant-database"}},d={},c=[{value:"Job creation",id:"job-creation",level:2},{value:"Job life cycle",id:"job-life-cycle",level:2},{value:"Statuses",id:"statuses",level:3},{value:"AMQP events",id:"amqp-events",level:3},{value:"Completion",id:"completion",level:2},{value:"Tasks",id:"tasks",level:2},{value:"Principle",id:"principle",level:3},{value:"Conception",id:"conception",level:3},{value:"Specific microservice implementation",id:"specific-microservice-implementation",level:3}];function l(e){const s={br:"br",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.p,{children:"Jobs module allows to execute tasks in parallel on several microservices."}),"\n",(0,t.jsxs)(s.p,{children:["Jobs module can be used by any microservice. When used, ",(0,t.jsx)(s.code,{children:"t_job_info"})," and ",(0,t.jsx)(s.code,{children:"t_job_parameters"})," tables are created into the\nmicroservice database/schema."]}),"\n",(0,t.jsxs)(s.p,{children:["The daemon ",(0,t.jsx)(s.code,{children:"JobService"})," is launched to manage jobs, it permanently searches for jobs to execute following a priority\nprovided by job submitter."]}),"\n",(0,t.jsxs)(s.p,{children:["To submit a job, it is necessary to create a ",(0,t.jsx)(s.code,{children:"JobInfo"})," object containing informations about the job (ie. job parameters,\njob instantiation class, ...).\n",(0,t.jsx)(s.code,{children:"Job"})," instantiation class must implement ",(0,t.jsx)(s.code,{children:"IJob"})," interface or better, inherit ",(0,t.jsx)(s.code,{children:"AbstractJob"})," class."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"Job"})," object is never manipulated by developers, only ",(0,t.jsx)(s.code,{children:"JobInfo"})," is available. ",(0,t.jsx)(s.code,{children:"JobInfo"})," contains job status and job\ninformations\nsuch as percent completion, start and end dates..."]}),"\n",(0,t.jsx)(s.h2,{id:"job-creation",children:"Job creation"}),"\n",(0,t.jsxs)(s.p,{children:["To create a job, developers must create a ",(0,t.jsx)(s.code,{children:"JobInfo"})," object by providing following attributes :"]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{style:{textAlign:"center"},children:"Name"}),(0,t.jsx)(s.th,{style:{textAlign:"center"},children:"Type"}),(0,t.jsx)(s.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{style:{textAlign:"center"},children:"locked"}),(0,t.jsx)(s.td,{style:{textAlign:"center"},children:(0,t.jsx)(s.code,{children:"Boolean"})}),(0,t.jsxs)(s.td,{style:{textAlign:"left"},children:[(0,t.jsx)(s.code,{children:"false"})," means your job will be cleaned by an automatic cleaning process"]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{style:{textAlign:"center"},children:"priority"}),(0,t.jsx)(s.td,{style:{textAlign:"center"},children:(0,t.jsx)(s.code,{children:"Integer"})}),(0,t.jsx)(s.td,{style:{textAlign:"left"},children:"Job priority"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{style:{textAlign:"center"},children:"parameters"}),(0,t.jsx)(s.td,{style:{textAlign:"center"},children:(0,t.jsx)(s.code,{children:"Set<JobParameter>"})}),(0,t.jsx)(s.td,{style:{textAlign:"left"},children:"Job parameters"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{style:{textAlign:"center"},children:"owner"}),(0,t.jsx)(s.td,{style:{textAlign:"center"},children:(0,t.jsx)(s.code,{children:"String"})}),(0,t.jsx)(s.td,{style:{textAlign:"left"},children:"The email of the job owner"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{style:{textAlign:"center"},children:"className"}),(0,t.jsx)(s.td,{style:{textAlign:"center"},children:(0,t.jsx)(s.code,{children:"String"})}),(0,t.jsx)(s.td,{style:{textAlign:"left"},children:"Job class name to execute"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{style:{textAlign:"center"},children:"expirationDate"}),(0,t.jsxs)(s.td,{style:{textAlign:"center"},children:[(0,t.jsx)(s.code,{children:"OffsetDateTime"})," ",(0,t.jsx)(s.em,{children:"optional"})]}),(0,t.jsxs)(s.td,{style:{textAlign:"left"},children:["When provided and reached, ",(0,t.jsx)(s.code,{children:"JobInfoService"})," will mark the job as ",(0,t.jsx)(s.code,{children:"FAILED"})]})]})]})]}),"\n",(0,t.jsxs)(s.p,{children:["Two methods permits ",(0,t.jsx)(s.code,{children:"JobInfo"})," creation :"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"JobInfoService.createAsPending"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"JobInfoService.createAsQueued"})}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"There is two job statuses :"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"PENDING"})," means ",(0,t.jsx)(s.code,{children:"JobInfo"})," is only created in database, and will need another manual state change to ",(0,t.jsx)(s.code,{children:"QUEUED"})," to be\ntaken in account by ",(0,t.jsx)(s.code,{children:"JobService"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"QUEUED"})," means ",(0,t.jsx)(s.code,{children:"JobInfo"})," is created in database and will be taken into account by JobService as soon as possible (\nie. ",(0,t.jsx)(s.code,{children:"JobService"})," will soon create a ",(0,t.jsx)(s.code,{children:"Job"})," from this ",(0,t.jsx)(s.code,{children:"JobInfo"})," and will execute it)."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Every instance of the same microservice will contains a ",(0,t.jsx)(s.code,{children:"JobService"})," that fills its thread pool with jobs from all\ntenants. If the pool contains an empty slot, it searches for the next tenant having job to do with the highest priority\nand so on."]}),"\n",(0,t.jsx)(s.p,{children:"To sum up, here is an example of Job creation :"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'Set<JobParameter> parameters = Sets.newHashSet();\nparameters.add(new JobParameter(<your job>.SOME_PARAMETER_NAME, "42"));\nJobInfo jobInfo = new JobInfo(false, 0, parameters, authResolver.getUser(), <your job>.class.getName())\njobInfo.setExpirationDate(OffsetDateTime.now().plusDays(40));\njobInfoService.createAsQueued(jobInfo);\nLOGGER.debug("New job scheduled uuid={}", jobInfo.getId().toString());\n'})}),"\n",(0,t.jsx)(s.h2,{id:"job-life-cycle",children:"Job life cycle"}),"\n",(0,t.jsx)(s.h3,{id:"statuses",children:"Statuses"}),"\n",(0,t.jsxs)(s.p,{children:["Once the ",(0,t.jsx)(s.code,{children:"JobService"})," chooses a ",(0,t.jsx)(s.code,{children:"QUEUED"})," ",(0,t.jsx)(s.code,{children:"JobInfo"}),", its status becomes ",(0,t.jsx)(s.code,{children:"TO_BE_RUN"}),".",(0,t.jsx)(s.br,{}),"\n","Then the ",(0,t.jsx)(s.code,{children:"JobService"})," will prepare the ",(0,t.jsx)(s.code,{children:"Job"})," by setting its parameters and eventually creating its workspace, if that's\nneeded. Once finished, the job status becomes ",(0,t.jsx)(s.code,{children:"RUNNING"})," and the Job is executed by the ",(0,t.jsx)(s.code,{children:"JobService"})," thread pool.",(0,t.jsx)(s.br,{}),"\n","If it fails, its status is set to ",(0,t.jsx)(s.code,{children:"FAILED"})," and stacktrace is saved in the ",(0,t.jsx)(s.code,{children:"JobInfo"})," database object.",(0,t.jsx)(s.br,{}),"\n","If it succeeds, its status is set to ",(0,t.jsx)(s.code,{children:"SUCCEEDED"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["It is possible to ask for stopping a job with method ",(0,t.jsx)(s.code,{children:"JobInfoService.stopJob"}),". This method is asynchronous and may be\ninefficient if job cannot be cancelled or if job has already finished.",(0,t.jsx)(s.br,{}),"\n","In case job is cancelled, its status is changed to ",(0,t.jsx)(s.code,{children:"ABORTED"}),".",(0,t.jsx)(s.br,{}),"\n","In case the expiration date, when provided, has been reached whereas job is still in ",(0,t.jsx)(s.code,{children:"QUEUED"})," state, its status\nbecomes ",(0,t.jsx)(s.code,{children:"FAILED"})," (provided stacktrace used to indicate JobInfo failed error is then used to indicate expiration date has\nbeen reached)."]}),"\n",(0,t.jsx)(s.h3,{id:"amqp-events",children:"AMQP events"}),"\n",(0,t.jsxs)(s.p,{children:["Some (important) status changes are notified with an AMQP broadcast event (",(0,t.jsx)(s.code,{children:"JobEvent"}),") :\n",(0,t.jsx)(s.code,{children:"ABORTED"}),", ",(0,t.jsx)(s.code,{children:"FAILED"}),", ",(0,t.jsx)(s.code,{children:"RUNNING"}),", ",(0,t.jsx)(s.code,{children:"SUCCEEDED"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"completion",children:"Completion"}),"\n",(0,t.jsx)(s.p,{children:"Most of jobs will take a long time to finish, so when that's possible, you should implement the job progression."}),"\n",(0,t.jsxs)(s.p,{children:["To do so, it is necessary to inherit ",(0,t.jsx)(s.code,{children:"AbstractJob"})," (which is a good idea in all cases by the way).\nThen, it is necessary to implement method ",(0,t.jsx)(s.code,{children:"getCompletionCount"})," giving a total ",(0,t.jsx)(s.em,{children:"tick"})," count.\nFinally, during job execution ie into ",(0,t.jsx)(s.code,{children:"run"})," method, it is necessary to call method ",(0,t.jsx)(s.code,{children:"advanceCompletion"})," the same number\nas ",(0,t.jsx)(s.code,{children:"getCompletionCount"})," returned one.\nThanks to that, at any time during job execution, it is possible to know progression percentage.\nThis is said, to avoid database saturation, this value is updated into database only one time per second (this value is\nconfigurable with ",(0,t.jsx)(s.em,{children:"regards.jobs.completion.update.rate.ms"})," property)."]}),"\n",(0,t.jsx)(s.h2,{id:"tasks",children:"Tasks"}),"\n",(0,t.jsxs)(s.p,{children:["In order to chain jobs, to execute ",(0,t.jsx)(s.em,{children:"Job1"})," only when ",(0,t.jsx)(s.em,{children:"Job2"})," and ",(0,t.jsx)(s.em,{children:"Job3"})," are finished for example, reliant tasks exists."]}),"\n",(0,t.jsx)(s.h3,{id:"principle",children:"Principle"}),"\n",(0,t.jsx)(s.p,{children:"The principle of reliant tasks is to provide all complex chain management into objects from rs-microservice and let\nuser just define its specific microservice behavior in its own entities (which inherit provided ones)."}),"\n",(0,t.jsx)(s.h3,{id:"conception",children:"Conception"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"AbstractReliantTask"})," is an abstract parameterized entity (mapped on ",(0,t.jsx)(s.code,{children:"t_task"})," table with a ",(0,t.jsx)(s.em,{children:"JOINED"})," inheritance\nstrategy) having :"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["an optional ",(0,t.jsx)(s.strong,{children:"OneToOne"})," relation to a ",(0,t.jsx)(s.code,{children:"JobInfo"})," (mapped with association table ",(0,t.jsx)(s.code,{children:"t_task_job_info"}),"),"]}),"\n",(0,t.jsxs)(s.li,{children:["a ",(0,t.jsx)(s.strong,{children:"ManyToMany"})," relation to several parameterized ",(0,t.jsx)(s.code,{children:"AbstractReliantTask"})," (mapped with association\ntable ",(0,t.jsx)(s.code,{children:"ta_tasks_reliant_tasks"}),"), to specify the dependency between others tasks and the current one."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Of course, this is implementing a tree structure that needs to be stopped. ",(0,t.jsx)(s.code,{children:"LeafTask"})," inherits ",(0,t.jsx)(s.code,{children:"AbstractReliantTask"})," to\nspecify a task without reliant tasks."]}),"\n",(0,t.jsx)(s.h3,{id:"specific-microservice-implementation",children:"Specific microservice implementation"}),"\n",(0,t.jsxs)(s.p,{children:["Here is ",(0,t.jsx)(s.em,{children:"rs-order"})," example :"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{src:n(3814).A+"",width:"556",height:"382"})}),"\n",(0,t.jsxs)(s.p,{children:["An order contains one task per dataset, each of that contains several files tasks. A files task is a task responsible of\nretrieving several files from ",(0,t.jsx)(s.em,{children:"rs_storage"}),". This retrieval is done thanks to a job."]}),"\n",(0,t.jsxs)(s.p,{children:["In this case, ",(0,t.jsx)(s.code,{children:"AbstractReliantTask"})," is responsible to provide progress advancement and dependencies between dataset\ntasks and files tasks, user doesn't need to think about this."]}),"\n",(0,t.jsxs)(s.p,{children:["In term of mapping, ",(0,t.jsx)(s.code,{children:"DatasetTask"})," is mapped to ",(0,t.jsx)(s.code,{children:"t_dataset_task"})," and ",(0,t.jsx)(s.code,{children:"FilesTask"})," to ",(0,t.jsx)(s.code,{children:"t_files_tasks"}),", these two tables are\njoined to ",(0,t.jsx)(s.code,{children:"t_task"})," with a foreign key.\nThis allows to add specific properties to these 2 entities being completely independent to ones defined into\n",(0,t.jsx)(s.em,{children:"rs_microservice"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["Finally, ",(0,t.jsx)(s.em,{children:"rs-order"}),", which is the root entity, is mapped to ",(0,t.jsx)(s.code,{children:"t_order"})," table and defines following ",(0,t.jsx)(s.code,{children:"NamedEntityGraph"})," :"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'@NamedEntityGraph(name = "graph.order",\n    attributeNodes = @NamedAttributeNode(value = "datasetTasks", subgraph = "graph.order.datasetTasks"),\n    subgraphs = { @NamedSubgraph(name = "graph.order.datasetTasks",\n            attributeNodes = @NamedAttributeNode(value = "reliantTasks")) })\n'})}),"\n",(0,t.jsx)(s.p,{children:"sub graph depth is only 1 because tree has a depth of one and thanks to the use of LeafTask which avoids trying to\naccess reliantTask lazy persistent set (which is empty but throws a lazy exception when accessed).\nPlease, keep that in mind when creating your own entity structure."}),"\n",(0,t.jsxs)(s.p,{children:["Simple ",(0,t.jsx)(s.code,{children:"IOrderRepository"})," example (to avoid multiple ",(0,t.jsx)(s.strong,{children:"select"})," and load entire tree with one request) :"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'public interface IOrderRepository extends JpaRepository<Order, Long> {\n    @EntityGraph("graph.order")\n    Order findOneById(Long id);\n}\n'})})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},3814:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/OrderMapping-d4edfed33d83c911740555f44fb2ebe8.png"},28453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>a});var t=n(96540);const i={},o=t.createContext(i);function r(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);
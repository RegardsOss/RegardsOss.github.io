"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[14333],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,k=u["".concat(l,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(k,s(s({ref:t},c),{},{components:n})):r.createElement(k,s({ref:t},c))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},49576:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={id:"swarm-networks",title:"Networks",slug:"/setup/swarm/advanced/swarm-networks"},s=void 0,i={unversionedId:"setup/advanced/swarm-networks",id:"setup/advanced/swarm-networks",title:"Networks",description:"This guide allows you to tune SWARM networks thanks to your inventory.",source:"@site/docs/setup/advanced/swarm-networks.md",sourceDirName:"setup/advanced",slug:"/setup/swarm/advanced/swarm-networks",permalink:"/docs/setup/swarm/advanced/swarm-networks",draft:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/docs/setup/advanced/swarm-networks.md",tags:[],version:"current",frontMatter:{id:"swarm-networks",title:"Networks",slug:"/setup/swarm/advanced/swarm-networks"},sidebar:"install",previous:{title:"Mount volumes, configs...",permalink:"/docs/setup/swarm/advanced/swarm-mount"},next:{title:"Securise using HTTPS",permalink:"/docs/setup/swarm/advanced/regards-https/"}},l={},p=[{value:"Internal network",id:"internal-network",level:3},{value:"Swarm network",id:"swarm-network",level:4},{value:"REGARDS network",id:"regards-network",level:4},{value:"External networks",id:"external-networks",level:3},{value:"Preferred networks",id:"preferred-networks",level:3}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This guide allows you to tune SWARM networks thanks to your inventory."),(0,o.kt)("h3",{id:"internal-network"},"Internal network"),(0,o.kt)("p",null,"Keep in mind you must ensure networks defined in this chapter do not mask real IPs your organisation use.  "),(0,o.kt)("h4",{id:"swarm-network"},"Swarm network"),(0,o.kt)("p",null,"By default, ",(0,o.kt)("em",{parentName:"p"},"demo inventories")," defines several communication networks used by Swarm nodes to communicate to each other.",(0,o.kt)("br",{parentName:"p"}),"\n","Default values are :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"# Inside inventories/<inventory name>/group_vars/docker_nodes/main.yml\ndocker_bip: 10.122.20.1/24\ndocker_ingress_network: 10.122.22.0/24\ndocker_ingress_network_gateway: 10.122.22.1\ndocker_gwbridge_network: 10.122.21.0/24\n")),(0,o.kt)("h4",{id:"regards-network"},"REGARDS network"),(0,o.kt)("p",null,"By default, ",(0,o.kt)("em",{parentName:"p"},"demo inventories")," defines an internal microservice communication network with the following value :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},'# Inside inventories/<inventory name>/group_vars/regards_nodes/main.yml\ngroup_docker_network_ip_network: "10.11.7."\n')),(0,o.kt)("p",null,"This property allows to create an ",(0,o.kt)("em",{parentName:"p"},"overlay")," network dedicated to our microservices with:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a subnet in ",(0,o.kt)("em",{parentName:"li"},"0/24")),(0,o.kt)("li",{parentName:"ul"},"and its gateway.")),(0,o.kt)("h3",{id:"external-networks"},"External networks"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"This option is facultative.")),(0,o.kt)("p",null,"To define external access to microservices, you must first declare the ",(0,o.kt)("strong",{parentName:"p"},"external networks")," to use as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"group_config_mservices:\n  external_networks:\n    - network: foo\n      name: net_foo\n")),(0,o.kt)("admonition",{title:"Generated configuration",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This configuration generates networks top-level element as defined in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/compose-spec/compose-spec/blob/master/spec.md#networks-top-level-element"},"compose specification"),".")),(0,o.kt)("admonition",{title:"Reminder",type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"The creation of these ",(0,o.kt)("strong",{parentName:"p"},"external networks")," is not handled by regards playbook. You must create them beforehand by your own!")),(0,o.kt)("p",null,"It is then possible to define specific connections to the following microservices: ",(0,o.kt)("em",{parentName:"p"},"gateway"),", ",(0,o.kt)("em",{parentName:"p"},"authentication"),", ",(0,o.kt)("em",{parentName:"p"},"catalog")," or ",(0,o.kt)("em",{parentName:"p"},"front"),"."),(0,o.kt)("p",null,"For instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"group_docker_mservices:\n  catalog:\n    configuration:\n      external_networks:\n        - network: foo\n          aliases:\n            - foo.catalog\n")),(0,o.kt)("admonition",{title:"Generated configuration",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This configuration generates networks and optionnaly aliases as defined ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/compose-spec/compose-spec/blob/master/spec.md#aliases"},"here"),".")),(0,o.kt)("h3",{id:"preferred-networks"},"Preferred networks"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"This option is facultative.")),(0,o.kt)("p",null,"As a side effect when ",(0,o.kt)("strong",{parentName:"p"},"several networks")," are defined inside your SWARM network, you will have to specify the preferred networks in order to microservice to talk to each other without network issue."),(0,o.kt)("p",null,"So to force internal microservice communication to use ",(0,o.kt)("strong",{parentName:"p"},"internal network"),", you will have to setup the following properties:"),(0,o.kt)("p",null,"For instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"group_config_mservices:\n  # Value depends on your internal network configuration\n  preferred_networks: 10.11\n")))}m.isMDXComponent=!0}}]);
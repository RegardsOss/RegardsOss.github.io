"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[80362],{15680:(e,t,a)=>{a.d(t,{xA:()=>p,yg:()=>m});var r=a(96540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),g=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=g(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=g(a),d=n,m=c["".concat(l,".").concat(d)]||c[d]||u[d]||o;return a?r.createElement(m,s(s({ref:t},p),{},{components:a})):r.createElement(m,s({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:n,s[1]=i;for(var g=2;g<o;g++)s[g]=a[g];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},33436:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>g});var r=a(58168),n=(a(96540),a(15680));const o={id:"backend-storage-allocation-strategy-plugins",title:"Allocation strategy plugins",sidebar_label:"Allocation strategy",slug:"/development/backend/services/storage/plugins/allocation-strategy/"},s=void 0,i={unversionedId:"development/backend/regards/storage/plugins/backend-storage-allocation-strategy-plugins",id:"development/backend/regards/storage/plugins/backend-storage-allocation-strategy-plugins",title:"Allocation strategy plugins",description:"Overview",source:"@site/docs/development/backend/regards/storage/plugins/allocation-strategy-plugins.md",sourceDirName:"development/backend/regards/storage/plugins",slug:"/development/backend/services/storage/plugins/allocation-strategy/",permalink:"/docs/next/development/backend/services/storage/plugins/allocation-strategy/",draft:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/docs/development/backend/regards/storage/plugins/allocation-strategy-plugins.md",tags:[],version:"current",frontMatter:{id:"backend-storage-allocation-strategy-plugins",title:"Allocation strategy plugins",sidebar_label:"Allocation strategy",slug:"/development/backend/services/storage/plugins/allocation-strategy/"},sidebar:"dev",previous:{title:"REST API",permalink:"/docs/next/development/backend/services/storage/api-swagger"},next:{title:"Data storage",permalink:"/docs/next/development/backend/services/storage/plugins/data-storage/"}},l={},g=[{value:"Overview",id:"overview",level:2},{value:"Interface",id:"interface",level:2},{value:"Implementation",id:"implementation",level:2}],p={toc:g},c="wrapper";function u(e){let{components:t,...a}=e;return(0,n.yg)(c,(0,r.A)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h2",{id:"overview"},"Overview"),(0,n.yg)("admonition",{type:"note"},(0,n.yg)("p",{parentName:"admonition"},"This extension point allows to define how storage microservice decides which ",(0,n.yg)("a",{parentName:"p",href:"/docs/next/development/backend/services/storage/plugins/data-storage/"},"Data storage plugin")," to use to store a given AIP and its associated files.")),(0,n.yg)("p",null,"REGARDS provides many implementation of this extension point :"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"https://github.com/RegardsOss/regards-storage/blob/master/storage/storage-plugin/src/main/java/fr/cnes/regards/modules/storage/plugin/allocation/strategy/DefaultAllocationStrategyPlugin.java"},"DefaultAllocationStrategyPlugin")," : Store all AIP files in the data storage with the highter priority"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"https://github.com/RegardsOss/regards-storage/blob/master/storage/storage-plugin/src/main/java/fr/cnes/regards/modules/storage/plugin/allocation/strategy/DefaultMultipleAllocationStrategy.java"},"DefaultMultipleAllocationStrategy")," : Store all AIP files in the given data storage(s). If many data storages are provided then the file are stored many times."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"https://github.com/RegardsOss/regards-storage/blob/master/storage/storage-plugin/src/main/java/fr/cnes/regards/modules/storage/plugin/allocation/strategy/PropertyDataStorageMapping.java"},"PropertyDataStorageMapping")," : Read into the AIP a property value and then find the data storage mapped to this value in the plugin configuration.")),(0,n.yg)("h2",{id:"interface"},"Interface"),(0,n.yg)("p",null,"   ",(0,n.yg)("a",{parentName:"p",href:"https://github.com/RegardsOss/regards-storage/blob/master/storage/storage-domain/src/main/java/fr/cnes/regards/modules/storage/domain/plugin/IAllocationStrategy.java"},"IAllocationStrategy")),(0,n.yg)("h2",{id:"implementation"},"Implementation"),(0,n.yg)("p",null,"To learn more about how to create your own plugin see ",(0,n.yg)("a",{parentName:"p",href:"/docs/next/development/backend/framework/modules/plugins/"},"Plugins")),(0,n.yg)("p",null,"Here under is an exemple of how to implements this extension point to create your own business logic."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-java"},'@Plugin(id = "exemple", version = "1.0.0", description = "exemple plugin",\n        author = "REGARDS Team", contact = "regards@c-s.fr", licence = "LGPLv3.0", owner = "CSSI",\n        url = "https://github.com/RegardsOss")\npublic class Plugin implements IAllocationStrategy {\n\n        @Override\n        public Multimap<Long, StorageDataFile> dispatch(Collection<StorageDataFile> dataFilesToHandle,\n            DispatchErrors dispatchErrors) {\n                // return map with key=<data storage plugin id> and value=<StorageDataFile to store>\n        }\n}\n')))}u.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[63646],{59627:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=s(74848),a=s(28453);const r={id:"1.15-to-2.0",title:"V1.15 to V2.0",slug:"/setup/swarm/migration/1.15-to-2.0",sidebar_position:6},t=void 0,o={id:"setup/swarm/migration/1.15-to-2.0",title:"V1.15 to V2.0",description:"Steps to migrate REGARDS from version 1.15 to 2.0",source:"@site/docs/setup/swarm/migration/1.15-to-2.0.md",sourceDirName:"setup/swarm/migration",slug:"/setup/swarm/migration/1.15-to-2.0",permalink:"/docs/setup/swarm/migration/1.15-to-2.0",draft:!1,unlisted:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/docs/setup/swarm/migration/1.15-to-2.0.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"1.15-to-2.0",title:"V1.15 to V2.0",slug:"/setup/swarm/migration/1.15-to-2.0",sidebar_position:6},sidebar:"install",previous:{title:"V1.14 to V1.15",permalink:"/docs/setup/swarm/migration/1.14-to-1.15"},next:{title:"CoTS Versions",permalink:"/docs/setup/swarm/cots-version/"}},l={},c=[{value:"Playbook modifications",id:"playbook-modifications",level:2},{value:"RabbitMQ exchange and queues migration",id:"rabbitmq-exchange-and-queues-migration",level:2},{value:"Notifier plugin configuration",id:"notifier-plugin-configuration",level:2},{value:"Problems you may encounter",id:"problems-you-may-encounter",level:2},{value:"Plugin issue",id:"plugin-issue",level:2},{value:"RabbitMQ migration issue",id:"rabbitmq-migration-issue",level:2}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Steps to migrate REGARDS from version 1.15 to 2.0"}),"\n",(0,i.jsx)(n.h2,{id:"playbook-modifications",children:"Playbook modifications"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Download last playbook version and move your inventory inside the new playbook"}),"\n",(0,i.jsxs)(n.li,{children:["Edit your inventory file ",(0,i.jsx)(n.code,{children:"group_vars/all/main.yml"})," :"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# Replace \nversion: 1.15.X\n# Into \nversion: 2.0.0\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Move static files from ",(0,i.jsx)(n.code,{children:"group_vars/regards_nodes/files"})," to ",(0,i.jsx)(n.code,{children:"static"}),":"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Move static files from ",(0,i.jsx)(n.code,{children:"group_vars/regards_nodes/files"})," to ",(0,i.jsx)(n.code,{children:"static"}),":"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd path/to/your/inventory/group_vars/regards_nodes/\nmv ./files ../../static\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Edit your inventory file ",(0,i.jsx)(n.code,{children:"group_vars/regards_nodes/main.yml"})," and make these changes:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# 1- Set property group_docker_static_files_migrated to True\n# Before\ngroup_docker_static_files_migrated: False\n# After\ngroup_docker_static_files_migrated: True\n\n# 2- Add new property legacy_spring to False\ngroup_config_mservices:\n  legacy_spring: False\n  [...]\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ensure all plugins, inside your inventory file ",(0,i.jsx)(n.code,{children:"group_vars/regards_nodes/main.yml"}),", end with ",(0,i.jsx)(n.code,{children:"-plugin"})," postfix, like\nthis:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# Before\ngroup_docker_plugins:\n  [...]\n  - image: rs-worker-manager-sender\n    tag: "{{ group_docker_tags.plugins }}"\n  [...]\n# After\ngroup_docker_plugins:\n  [...]\n  - image: rs-worker-manager-sender-plugin\n    tag: "{{ group_docker_tags.plugins }}"\n  [...]\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Remove the ",(0,i.jsx)(n.code,{children:"manual_revision"})," property on RabbitMQ service:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# Before\ngroup_docker_cots:\n  [...]\n  rabbitmq:\n    tag: "{{ group_docker_tags.cots }}"\n    manual_revision: xxx\n\n# After\ngroup_docker_cots:\n  [...]\n  rabbitmq:\n    tag: "{{ group_docker_tags.cots }}"\n    [...]\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Shutdown REGARDS using the playbook"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ansible-playbook --ask-pass --ask-become-pass -i [...] regards-shutdown.yml [...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Or if your inventory use a vault system to encrypt credentials"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ansible-playbook --ask-pass --ask-become-pass --ask-vault-pass -i [...] regards-shutdown.yml [...]\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Remove old plugins from NFS as their name may have changed"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ansible-playbook --ask-pass --ask-become-pass -i [...] regards-delete-plugins.yml [...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Or if your inventory use a vault system to encrypt credentials"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ansible-playbook --ask-pass --ask-become-pass --ask-vault-pass -i [...] regards-delete-plugins.yml [...]\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Update REGARDS using the playbook"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ansible-playbook --ask-pass --ask-become-pass -i [...] regards.yml [...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Or if your inventory use a vault system to encrypt credentials"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ansible-playbook --ask-pass --ask-become-pass --ask-vault-pass -i [...] regards.yml [...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"During startup and before RabbitMQ migration, some REGARDS services will be unavailable."}),"\n",(0,i.jsx)(n.h2,{id:"rabbitmq-exchange-and-queues-migration",children:"RabbitMQ exchange and queues migration"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Wait RabbitMQ to be up and running"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd /path/to/regards/cli\n./status.sh\n# Check every containers of RabbitMQ are up and running\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Now, connect to your RabbitMQ node or one of its replicate"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Enter inside one of the RabbitMQ container\n./exec.sh rs-rabbitmq bash\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a migration script using ",(0,i.jsx)(n.code,{children:"vi /var/lib/rabbitmq/mnesia/migration-to-2.0-backup-messages.sh"})," with following content:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash -e\n\n# Param 1 : Shovel ID\n# Param 2 : Source tag\n# Param 2 : Dest tag\nfunction add_shovel\n{\n  local shovelId=${1}\n  local srcQueue=${2}\n  local destQueue=${3}\n\n  printf >&2 "[\\033[32mSHOVEL\\033[m]\\tAdd shovel to move ${srcQueue} to ${destQueue}\\n"\n  rabbitmqctl --quiet set_parameter shovel migrate-${shovelId} \\\n  "{\\"src-protocol\\": \\"amqp091\\", \\"src-uri\\": \\"amqp:///regards.multitenant.manager\\", \\"src-queue\\": \\"${srcQueue}\\", \\"dest-protocol\\": \\"amqp091\\", \\"dest-uri\\": \\"amqp:///regards.multitenant.manager\\", \\"dest-queue\\": \\"${destQueue}\\"}"\n}\n\n# Param 1 : Shovel ID\nfunction delete_shovel\n{\n  local shovelId=${1}\n\n  printf >&2 "[\\033[32mSHOVEL\\033[m]\\tRemove shovel ${shovelId}\\n"\n  rabbitmqctl --quiet clear_parameter shovel migrate-${shovelId}\n}\n\n\n# Param 1 : Queue Name to delete\n# Ensure queue is empty\nfunction delete_empty_queue\n{\n  local queueName=${1}\n\n  printf >&2 "[\\033[32mQUEUES\\033[m]\\tRemove queue ${queueName}\\n"\n  rabbitmqctl --quiet delete_queue --vhost=regards.multitenant.manager ${queueName} --if-unused --if-empty || printf >&2 "[\\033[34mQUEUES\\033[m]\\tQueue ${queueName} not existing, ignoring error...\\n"\n}\n\n\n# Param 1 : Queue Name to delete\n# Do not check if queue is empty\nfunction delete_queue\n{\n  local queueName=${1}\n\n  printf >&2 "[\\033[32mQUEUES\\033[m]\\tRemove queue ${queueName}\\n"\n  rabbitmqctl --quiet delete_queue --vhost=regards.multitenant.manager ${queueName} --if-unused || printf >&2 "[\\033[34mQUEUES\\033[m]\\tQueue ${queueName} not existing, ignoring error...\\n"\n}\n\n# Param 1 : Exchange Name to delete\nfunction delete_exchange\n{\n  local exchangeName=${1}\n\n  printf >&2 "[\\033[32mEXCHANGES\\033[m]\\tRemove exchange ${exchangeName}\\n"\n  rabbitmqadmin -V regards.multitenant.manager delete exchange name="${exchangeName}" || printf >&2 "[\\033[34mEXCHANGES\\033[m]\\tExchange ${exchangeName} not existing, ignoring error...\\n"\n}\n\n# Param 1 : Queue Name to create\nfunction create_tmp_queue\n{\n  local queueName=${1}\n  printf >&2 "[\\033[32mQUEUES\\033[m]\\tCreate queue ${queueName}\\n"\n  rabbitmqadmin declare queue --vhost=regards.multitenant.manager name=${queueName} durable=true\n}\n\ncreate_tmp_queue tmp.WorkerManagerResponse\ncreate_tmp_queue tmp.NotificationRequestEventHandler\ncreate_tmp_queue tmp.SpecificRecipientNotificationRequestEventHandler\n\nadd_shovel 01 \\\n   regards.worker.manager.response \\\n   tmp.WorkerManagerResponse\n\nadd_shovel 02 \\\n  regards.broadcast.rs-notifier.fr.cnes.regards.modules.notifier.service.flow.NotificationRequestEventHandler \\\n  tmp.NotificationRequestEventHandler\n\nadd_shovel 03 \\\n  regards.broadcast.rs-notifier.fr.cnes.regards.modules.notifier.service.flow.SpecificRecipientNotificationRequestEventHandler \\\n  tmp.SpecificRecipientNotificationRequestEventHandler\n\nprintf >&2 "[\\033[32mSHOVEL\\033[m]\\tWait 30s to ensure messages have been moved to tmp queues\\n"\nsleep 30\n\ndelete_shovel 01\ndelete_shovel 02\ndelete_shovel 03\n\ndelete_empty_queue regards.worker.manager.response\ndelete_empty_queue regards.broadcast.rs-notifier.fr.cnes.regards.modules.notifier.service.flow.NotificationRequestEventHandler\ndelete_empty_queue regards.broadcast.rs-notifier.fr.cnes.regards.modules.notifier.service.flow.SpecificRecipientNotificationRequestEventHandler\n\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Execute the script:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"chmod +x /var/lib/rabbitmq/mnesia/migration-to-2.0-backup-messages.sh\n/var/lib/rabbitmq/mnesia/migration-to-2.0-backup-messages.sh\nrm -f /var/lib/rabbitmq/mnesia/migration-to-2.0-backup-messages.sh\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Get out of the RabbitMQ container, wait 5 min, and ensure REGARDS is running fine (using ",(0,i.jsx)(n.code,{children:"status.sh"}),")"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Now you can start the final RabbitMQ migration step. Connect to your RabbitMQ node or one of its replicate"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Enter inside one of the RabbitMQ container\n./exec.sh rs-rabbitmq bash\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a migration script using ",(0,i.jsx)(n.code,{children:"vi /var/lib/rabbitmq/mnesia/migration-to-2.0-restore-messages.sh"})," with following content:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash -e\n\n# Param 1 : Shovel ID\n# Param 2 : Source tag\n# Param 2 : Dest tag\nfunction add_shovel\n{\n  local shovelId=${1}\n  local srcQueue=${2}\n  local destQueue=${3}\n\n  printf >&2 "[\\033[32mSHOVEL\\033[m]\\tAdd shovel to move ${srcQueue} to ${destQueue}\\n"\n  rabbitmqctl --quiet set_parameter shovel migrate-${shovelId} \\\n  "{\\"src-protocol\\": \\"amqp091\\", \\"src-uri\\": \\"amqp:///regards.multitenant.manager\\", \\"src-queue\\": \\"${srcQueue}\\", \\"dest-protocol\\": \\"amqp091\\", \\"dest-uri\\": \\"amqp:///regards.multitenant.manager\\", \\"dest-queue\\": \\"${destQueue}\\"}"\n}\n\n# Param 1 : Shovel ID\nfunction delete_shovel\n{\n  local shovelId=${1}\n\n  printf >&2 "[\\033[32mSHOVEL\\033[m]\\tRemove shovel ${shovelId}\\n"\n  rabbitmqctl --quiet clear_parameter shovel migrate-${shovelId}\n}\n\n\n# Param 1 : Queue Name to delete\n# Ensure queue is empty\nfunction delete_empty_queue\n{\n  local queueName=${1}\n\n  printf >&2 "[\\033[32mQUEUES\\033[m]\\tRemove queue ${queueName}\\n"\n  rabbitmqctl --quiet delete_queue --vhost=regards.multitenant.manager ${queueName} --if-unused --if-empty || printf >&2 "[\\033[34mQUEUES\\033[m]\\tQueue ${queueName} not existing, ignoring error...\\n"\n}\n\n\nadd_shovel 01 \\\n   tmp.WorkerManagerResponse \\\n   regards.worker.manager.response\n\nadd_shovel 02 \\\n  tmp.NotificationRequestEventHandler \\\n  regards.broadcast.rs-notifier.fr.cnes.regards.modules.notifier.service.flow.NotificationRequestEventHandler\n\nadd_shovel 03 \\\n  tmp.SpecificRecipientNotificationRequestEventHandler \\\n  regards.broadcast.rs-notifier.fr.cnes.regards.modules.notifier.service.flow.SpecificRecipientNotificationRequestEventHandler\n\nprintf >&2 "[\\033[32mSHOVEL\\033[m]\\tWait 30s to ensure messages have been moved from tmp queues to real queues\\n"\nsleep 30\n\n\ndelete_shovel 01\ndelete_shovel 02\ndelete_shovel 03\n\ndelete_empty_queue tmp.WorkerManagerResponse\ndelete_empty_queue tmp.NotificationRequestEventHandler\ndelete_empty_queue tmp.SpecificRecipientNotificationRequestEventHandler\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Execute the script:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"chmod +x /var/lib/rabbitmq/mnesia/migration-to-2.0-restore-messages.sh\n/var/lib/rabbitmq/mnesia/migration-to-2.0-restore-messages.sh\nrm -f /var/lib/rabbitmq/mnesia/migration-to-2.0-restore-messages.sh\n"})}),"\n",(0,i.jsx)(n.h2,{id:"notifier-plugin-configuration",children:"Notifier plugin configuration"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["This migration is only mandatory for REGARDS project using ",(0,i.jsx)(n.code,{children:"dissemination-ack-sender-plugin"}),"."]})}),"\n",(0,i.jsxs)(n.p,{children:["Notifier ",(0,i.jsx)(n.code,{children:"dissemination-ack-sender-plugin"})," configuration has changed with the configuration version 2.0 of the plugin.\nTo update the configuration of you plugin, you have to download the plugin configuration from REGARDS HMI update with\nhere under information and export it again."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"New recipient label parameter :"}),"\nAdd the new recipientLabel parameter in the plugin configuration section. The value of the parameter should be set to\nthe name of the dissemination recipient configured in the notifier sender\nplugin from the source REGARDS."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "configuration": [\n    {\n      "key": "fr.cnes.regards.framework.modules.plugins.domain.PluginConfiguration",\n      "value": {\n        "pluginId": "DisseminationAckSender",\n        "parameters": [\n          {\n            "name": "recipientLabel",\n            "type": "STRING",\n            "value": "<Ack catalog owner name>",\n            "dynamic": false\n          },\n          ...\n        ]\n      }\n    }\n  ]\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"New AIP exchange parameter :"}),"\nIf the product to ack in the source REGARDS catalog is an OAIS product, add the RabbitMQ exchange name parameter."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "configuration": [\n    {\n      "key": "fr.cnes.regards.framework.modules.plugins.domain.PluginConfiguration",\n      "value": {\n        "pluginId": "DisseminationAckSender",\n        "parameters": [\n          {\n            "name": "aipDisseminationExchange",\n            "type": "STRING",\n            "value": "<Exchange name to send AIP ack dissemination notification>",\n            "dynamic": false\n          },\n          ...\n        ]\n      }\n    }\n  ]\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"New GeoJson exchange parameter :"}),"\nIf the product to ack in the source REGARDS catalog is an OAIS product, add the RabbitMQ exchange name parameter."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "configuration": [\n    {\n      "key": "fr.cnes.regards.framework.modules.plugins.domain.PluginConfiguration",\n      "value": {\n        "pluginId": "DisseminationAckSender",\n        "parameters": [\n          {\n            "name": "featureDisseminationExchange",\n            "type": "STRING",\n            "value": "<Exchange name to send AIP ack dissemination notification>",\n            "dynamic": false\n          },\n          ...\n        ]\n      }\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"problems-you-may-encounter",children:"Problems you may encounter"}),"\n",(0,i.jsx)(n.h2,{id:"plugin-issue",children:"Plugin issue"}),"\n",(0,i.jsxs)(n.p,{children:["In the event of a microservice startup error with a ",(0,i.jsx)(n.code,{children:"Not a managed type: class fr.cnes.regards.modules.xxxx"})," error, make sure there are no plugins from the old version left in the associated NFS directory. If so, delete the old versions manually."]}),"\n",(0,i.jsx)(n.h2,{id:"rabbitmq-migration-issue",children:"RabbitMQ migration issue"}),"\n",(0,i.jsxs)(n.p,{children:["In the event of a microservice startup error with a ",(0,i.jsx)(n.code,{children:" Going to exit <#20f786a8> c.r.c.ShutdownSignalException: channel error; protocol method: #method<channel.close>(reply-code=406, reply-text=PRECONDITION_FAILED - inequivalent arg 'x-dead-letter-exchange' for queue 'xxx.xxx.xxxx' in vhost 'regards.multitenant.manager': received the value 'regards.DLX' of type 'longstr' but current is none)"})," error, it is necessary to replay the RabbitMQ migration scripts described above."]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>o});var i=s(96540);const a={},r=i.createContext(a);function t(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);
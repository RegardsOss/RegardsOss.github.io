"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[40985],{37613:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>i});var r=s(74848),t=s(28453);const a={title:"Placement constraint",slug:"/setup/swarm/advanced/placement-constraint"},o=void 0,c={id:"setup/swarm/advanced/swarm-placement-constraint",title:"Placement constraint",description:"This guide allows you to",source:"@site/docs/setup/swarm/advanced/swarm-placement-constraint.md",sourceDirName:"setup/swarm/advanced",slug:"/setup/swarm/advanced/placement-constraint",permalink:"/docs/setup/swarm/advanced/placement-constraint",draft:!1,unlisted:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/docs/setup/swarm/advanced/swarm-placement-constraint.md",tags:[],version:"current",frontMatter:{title:"Placement constraint",slug:"/setup/swarm/advanced/placement-constraint"},sidebar:"install",previous:{title:"Elasticsearch",permalink:"/docs/setup/swarm/advanced/elasticsearch/"},next:{title:"Administration",permalink:"/docs/setup/swarm/cli/"}},l={},i=[{value:"Configure node label",id:"configure-node-label",level:2},{value:"Configure service constraint",id:"configure-service-constraint",level:2}];function d(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["This guide allows you to\nconfigure ",(0,r.jsx)(n.a,{href:"https://docs.docker.com/reference/compose-file/deploy/#placement",children:"Docker services placement constraint"}),".",(0,r.jsx)(n.br,{}),"\n","It allows to specify required property the platform's node must fulfill to run a service container on it."]}),"\n",(0,r.jsx)(n.h2,{id:"configure-node-label",children:"Configure node label"}),"\n",(0,r.jsxs)(n.p,{children:["When you configure your inventory host file, you can define property on VMs using the ",(0,r.jsx)(n.code,{children:"labels"})," property:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",metastring:'{4} title="The demo-performance inventory hosts file defines 3 types of node property = cots, log and common"',children:'regards-master-1                             ansible_host=server01.regards.fr ansible_connection=local\nregards-master-2                             ansible_host=server02.regards.fr\nregards-master-3                             ansible_host=server03.regards.fr\nregards-slave-1  labels=\'{"type": "cots"}\'   ansible_host=server04.regards.fr\nregards-slave-2  labels=\'{"type": "cots"}\'   ansible_host=server05.regards.fr\nregards-slave-3  labels=\'{"type": "cots"}\'   ansible_host=server06.regards.fr\nregards-slave-4  labels=\'{"type": "log"}\'    ansible_host=server07.regards.fr\nregards-slave-5  labels=\'{"type": "common"}\' ansible_host=server08.regards.fr\nregards-slave-6  labels=\'{"type": "common"}\' ansible_host=server09.regards.fr\nregards-slave-7  labels=\'{"type": "common"}\' ansible_host=server10.regards.fr\n'})}),"\n",(0,r.jsxs)(n.p,{children:["When you ",(0,r.jsxs)(n.a,{href:"/docs/setup/",children:["install Docker Swarm using the playbook ",(0,r.jsx)(n.code,{children:"setup-vm.yml"})]}),", it will add the label to the\nnode:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",metastring:"{5}",children:'$ docker node inspect server04.regards.fr\n    [..]\n    "Spec": {\n        "Labels": {\n            "type": "cots"\n        },\n        "Role": "worker",\n        "Availability": "active"\n    },\n'})}),"\n",(0,r.jsx)(n.h2,{id:"configure-service-constraint",children:"Configure service constraint"}),"\n",(0,r.jsxs)(n.p,{children:["Every service (REGARDS service, Elasticsearch, RabbitMQ, Prometheus, Workers...) that you deploy thanks to the REGARDS\nAnsible inventory can define the ",(0,r.jsx)(n.code,{children:"node_label_placement_constraint"})," property:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:"{4-6,13-15}",children:'# WORKERS\ngroup_docker_workers:\n  - name: some-worker\n    node_label_placement_constraint:\n      key: type\n      value: common\n\n# COTS\ngroup_docker_cots:\n  elasticsearch:\n    tag: "{{ group_docker_tags.cots }}"\n    global_service: true\n    node_label_placement_constraint:\n      key: type\n      value: cots\n'})}),"\n",(0,r.jsx)(n.p,{children:"This example creates two services:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["a worker that can run on any node having ",(0,r.jsx)(n.code,{children:'labels=\'{"type": "common"}\''})]}),"\n",(0,r.jsxs)(n.li,{children:["an elasticsearch cluster that will run on all node having ",(0,r.jsx)(n.code,{children:'labels=\'{"type": "cots"}\''})]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{title:"Global services",type:"info",children:(0,r.jsxs)(n.p,{children:["Global services are replicated on any node that accept it. ",(0,r.jsx)(n.code,{children:"global_service"})," can be combined\nwith ",(0,r.jsx)(n.code,{children:"node_label_placement_constraint"})," to create a cluster on specific nodes."]})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var r=s(96540);const t={},a=r.createContext(t);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);
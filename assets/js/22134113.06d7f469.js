"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[59262],{55758:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=t(74848),a=t(28453);const o={id:"backend-framework-starters-multitenant",title:"Multitenant starter",slug:"/development/backend/framework/starters/multitenant/"},s=void 0,i={id:"development/backend/framework/starters/backend-framework-starters-multitenant",title:"Multitenant starter",description:"Purpose",source:"@site/versioned_docs/version-1.13.0/development/backend/framework/starters/multitenant-starter.md",sourceDirName:"development/backend/framework/starters",slug:"/development/backend/framework/starters/multitenant/",permalink:"/docs/1.13.0/development/backend/framework/starters/multitenant/",draft:!1,unlisted:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/versioned_docs/version-1.13.0/development/backend/framework/starters/multitenant-starter.md",tags:[],version:"1.13.0",frontMatter:{id:"backend-framework-starters-multitenant",title:"Multitenant starter",slug:"/development/backend/framework/starters/multitenant/"},sidebar:"dev",previous:{title:"Module starter",permalink:"/docs/1.13.0/development/backend/framework/starters/module/"},next:{title:"OAIS starter",permalink:"/docs/1.13.0/development/backend/framework/starters/oais/"}},l={},d=[{value:"Purpose",id:"purpose",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Autoconfiguration",id:"autoconfiguration",level:2},{value:"How to",id:"how-to",level:2},{value:"How to use",id:"how-to-use",level:3},{value:"How to override default behaviour",id:"how-to-override-default-behaviour",level:3},{value:"How to handle bootstrap tenants",id:"how-to-handle-bootstrap-tenants",level:3}];function c(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"purpose",children:"Purpose"}),"\n",(0,r.jsx)(n.p,{children:"This starter is used to manage multitenancy context."}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.p,{children:"For default behaviour, only available for test purpose :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"# Static list of tenants\nregards.tenants=tenant1,tenant2\n# Static request tenant\nregards.tenant=tenant1\n"})}),"\n",(0,r.jsx)(n.p,{children:"To manage a list of tenant at bootstrap from static configuration :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"# Static bootstrap tenants (comma separated)\nregards.bootstrap-tenants=\n"})}),"\n",(0,r.jsx)(n.h2,{id:"autoconfiguration",children:"Autoconfiguration"}),"\n",(0,r.jsx)(n.p,{children:"Starter autoconfigures beans :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ITenantResolver"})," to retrieve list of tenants,"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@FunctionalInterface\npublic interface ITenantResolver {\n\n    /**\n     * @return all tenants regardless its configuration\n     */\n    Set<String> getAllTenants();\n\n    /**\n     * @return all tenants fully configured\n     */\n    Set<String> getAllActiveTenants();\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"IRuntimeTenantResolver"})," to retrieve request tenant at runtime."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public interface IRuntimeTenantResolver {\n\n    /**\n     * @return runtime tenant\n     */\n    String getTenant();\n\n    /**\n     * Does the current tenant is instance\n     * @return true|false\n     */\n    boolean isInstance();\n\n    /**\n     * Force runtime tenant to a specific value on current thread.<br/>\n     * We recommend to use {@link IRuntimeTenantResolver#clearTenant()} to clean the thread in a finally clause.<br/>\n     * It is mostly recommended for server threads as they are reused.\n     * @param tenant tenant\n     */\n    void forceTenant(String tenant);\n\n    /**\n     * Clear forced tenant on current thread\n     */\n    void clearTenant();\n}\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"danger",children:(0,r.jsxs)(n.p,{children:["In production, the implementation of ",(0,r.jsx)(n.code,{children:"IRuntimeTenantResolver"})," must be ",(0,r.jsx)(n.strong,{children:"thread safe"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"how-to",children:"How to"}),"\n",(0,r.jsx)(n.h3,{id:"how-to-use",children:"How to use"}),"\n",(0,r.jsx)(n.p,{children:"Just inject beans in your component."}),"\n",(0,r.jsx)(n.h3,{id:"how-to-override-default-behaviour",children:"How to override default behaviour"}),"\n",(0,r.jsxs)(n.p,{children:["Create your own ",(0,r.jsx)(n.code,{children:"ITenantResolver"})," bean to implement your own tenant retrieval.\nCreate your own ",(0,r.jsx)(n.code,{children:"IRuntimeTenantResolver"})," bean to implement your own ",(0,r.jsx)(n.strong,{children:"runtime"})," tenant retrieval."]}),"\n",(0,r.jsx)(n.h3,{id:"how-to-handle-bootstrap-tenants",children:"How to handle bootstrap tenants"}),"\n",(0,r.jsx)(n.p,{children:"Just autowired following property class to access bootstrap tenants."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Autowired\nprivate MultitenantBootstrapProperties bootstrapProperties;\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var r=t(96540);const a={},o=r.createContext(a);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);
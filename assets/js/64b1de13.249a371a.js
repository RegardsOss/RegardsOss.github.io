"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[66751],{73687:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var i=n(74848),s=n(28453);const a={id:"2.0-to-2.1",title:"V2.0 to V2.1",slug:"/setup/swarm/migration/2.0-to-2.1",sidebar_position:7},o=void 0,r={id:"setup/swarm/migration/2.0-to-2.1",title:"V2.0 to V2.1",description:"Steps to migrate REGARDS from version 2.0 to 2.1",source:"@site/docs/setup/swarm/migration/2.0-to-2.1.md",sourceDirName:"setup/swarm/migration",slug:"/setup/swarm/migration/2.0-to-2.1",permalink:"/docs/next/setup/swarm/migration/2.0-to-2.1",draft:!1,unlisted:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/docs/setup/swarm/migration/2.0-to-2.1.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"2.0-to-2.1",title:"V2.0 to V2.1",slug:"/setup/swarm/migration/2.0-to-2.1",sidebar_position:7},sidebar:"install",previous:{title:"V1.15 to V2.0",permalink:"/docs/next/setup/swarm/migration/1.15-to-2.0"},next:{title:"CoTS Versions",permalink:"/docs/next/setup/swarm/cots-version/"}},d={},l=[{value:"Database modifications",id:"database-modifications",level:2},{value:"Email addresses",id:"email-addresses",level:3},{value:"Dissemination info",id:"dissemination-info",level:3}];function c(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Steps to migrate REGARDS from version 2.0 to 2.1"}),"\n",(0,i.jsx)(t.h2,{id:"database-modifications",children:"Database modifications"}),"\n",(0,i.jsx)(t.h3,{id:"email-addresses",children:"Email addresses"}),"\n",(0,i.jsx)(t.p,{children:"In version 2.1 of REGARDS, it is no longer allowed to have multiple users with identical email addresses except for the case.\nIt is therefore necessary before the migration to check the uniqueness of the usernames by case-sensitive email address."}),"\n",(0,i.jsx)(t.p,{children:"Here are some SQL queries to run on the admin schema of the rs-instance database to display the duplicate user accounts that will need to be removed for the migration to REGARDS 2.1."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",children:'SELECT LOWER(t_account.email), count(*) FROM "admin"."t_account" group by LOWER(t_account.email) HAVING COUNT(*) > 1;\n\nSELECT * FROM "admin"."t_account" WHERE LOWER(email) IN (SELECT LOWER(t_account.email) FROM "admin"."t_account" group by LOWER(t_account.email) HAVING COUNT(*) > 1) ORDER BY email;\n'})}),"\n",(0,i.jsx)(t.p,{children:"In order for the REGARDS application to be migrated and started, the previous queries must return no results."}),"\n",(0,i.jsx)(t.h3,{id:"dissemination-info",children:"Dissemination info"}),"\n",(0,i.jsxs)(t.p,{children:["In the version 2.1 of REGARDS, the database does not allow anymore duplicated dissemination (same recipient and same requestId) for features (FEM products).\nIt means that all existing duplicated dissemination must be removed.\nHere are some SQL queries to run on the fem schema of the project database to create a new table with the duplicated dissemination.\nPlease note that you need to ",(0,i.jsx)(t.em,{children:"update the following script with realistic dates"}),", depending on your fem.t_feature_dissemination size.\nKeep the time interval short, and repeat scripts to cover all features stored in database."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",children:"DROP TABLE IF EXISTS fem.TMP_DOUBLE_DISS_DETECTED; \nCREATE TABLE fem.TMP_DOUBLE_DISS_DETECTED AS\nSELECT id, B.feature_id, B.label, request_date, ack_date, doublon_count\nFROM fem.t_feature_dissemination_info B \nJOIN (\n    SELECT label, feature_id, COUNT(*) AS doublon_count \n    FROM fem.t_feature_dissemination_info\n    WHERE request_date BETWEEN '2010-03-01 00:00:00' AND '2030-04-01 00:00:00' \n    AND feature_id > 0 \n    GROUP BY label, feature_id \n    HAVING COUNT(*) > 1\n) AS sous_requet\nON sous_requet.feature_id = B.feature_id AND sous_requet.label = B.label;\n\nDROP TABLE IF EXISTS fem.TMP_OLDEST_DISS_ACK; \nCREATE TABLE fem.TMP_OLDEST_DISS_ACK AS \nSELECT DISTINCT ON (label, feature_id) *\nFROM fem.TMP_DOUBLE_DISS_DETECTED\nWHERE ack_date is not null\nORDER BY label, feature_id, ack_date ASC;\n\nDROP TABLE IF EXISTS fem.TMP_OLDEST_DISS_WITHOUT_ACK;\nCREATE TABLE fem.TMP_OLDEST_DISS_WITHOUT_ACK AS  \nSELECT DISTINCT ON (label, feature_id) *\nFROM fem.tmp_double_diss_detected\nWHERE ack_date is null\nORDER BY label, feature_id, request_date ASC;\n\nDELETE FROM fem.tmp_oldest_diss_without_ack t\nWHERE EXISTS (\n    SELECT 1\n    FROM fem.TMP_OLDEST_DISS_ACK a\n    WHERE a.feature_id = t.feature_id\n      AND a.label = t.label\n);\n\nSELECT count(*) FROM fem.TMP_DOUBLE_DISS_DETECTED;\n"})}),"\n",(0,i.jsx)(t.p,{children:"This script shows how many duplicated entries have been detected."}),"\n",(0,i.jsx)(t.p,{children:"Check now the table fem.TMP_DOUBLE_DISS_DETECTED. If there is at least one entry, you have to launch the following second script.\nThis second script delete all duplicated disseminations, and update the dissemination_pending value to false."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",children:"DELETE FROM fem.t_feature_dissemination_info\nWHERE id IN (SELECT id FROM fem.TMP_OLDEST_DISS_ACK);\nDELETE FROM fem.t_feature_dissemination_info\nWHERE id IN (SELECT id FROM fem.TMP_OLDEST_DISS_WITHOUT_ACK);\nUPDATE fem.t_feature SET dissemination_pending = FALSE\nWHERE id IN (SELECT feature_id FROM fem.TMP_OLDEST_DISS_ACK);\nUPDATE fem.t_feature SET dissemination_pending = FALSE\nWHERE id IN (SELECT feature_id FROM fem.TMP_OLDEST_DISS_WITHOUT_ACK);\n"})}),"\n",(0,i.jsx)(t.p,{children:"This script does not return anything."}),"\n",(0,i.jsx)(t.p,{children:"Once all FEM features have been treated, you can launch the third script:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",children:"DROP TABLE fem.TMP_DOUBLE_DISS_DETECTED;\nDROP TABLE fem.TMP_OLDEST_DISS_ACK; \nDROP TABLE fem.TMP_OLDEST_DISS_WITHOUT_ACK;\n"})}),"\n",(0,i.jsx)(t.p,{children:"This script does not return anything."}),"\n",(0,i.jsx)(t.h1,{id:"new-downloader-service",children:"New downloader service"}),"\n",(0,i.jsx)(t.p,{children:"As of REGARDS version 2.1.0, file download functionality has been delegated to a dedicated microservice.\nIt's no longer the storage microservice that's in charge, but the new downloader microservice."}),"\n",(0,i.jsxs)(t.p,{children:["To add the downloader microservice to your REGARDS deployment as of version 2.1.0, add it to your inventory as indicated in the ",(0,i.jsx)(t.a,{href:"/docs/next/setup/swarm/advanced/microservice-setup#file-download-management",children:"installation manual"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"The aim of this new microservice is to make downloading highly scalable."})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var i=n(96540);const s={},a=i.createContext(s);function o(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);
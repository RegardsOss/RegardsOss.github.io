"use strict";(self.webpackChunkregardsoss_github_io=self.webpackChunkregardsoss_github_io||[]).push([[88816],{19952:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>g});var s=a(74848),n=a(28453);const r={id:"backend-storage-allocation-strategy-plugins",title:"Allocation strategy plugins",sidebar_label:"Allocation strategy",slug:"/development/backend/services/storage/plugins/allocation-strategy/"},o=void 0,i={id:"development/backend/regards/storage/plugins/backend-storage-allocation-strategy-plugins",title:"Allocation strategy plugins",description:"Overview",source:"@site/versioned_docs/version-1.13.0/development/backend/regards/storage/plugins/allocation-strategy-plugins.md",sourceDirName:"development/backend/regards/storage/plugins",slug:"/development/backend/services/storage/plugins/allocation-strategy/",permalink:"/docs/1.13.0/development/backend/services/storage/plugins/allocation-strategy/",draft:!1,unlisted:!1,editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/versioned_docs/version-1.13.0/development/backend/regards/storage/plugins/allocation-strategy-plugins.md",tags:[],version:"1.13.0",frontMatter:{id:"backend-storage-allocation-strategy-plugins",title:"Allocation strategy plugins",sidebar_label:"Allocation strategy",slug:"/development/backend/services/storage/plugins/allocation-strategy/"},sidebar:"dev",previous:{title:"API",permalink:"/docs/1.13.0/development/backend/services/storage/api-swagger"},next:{title:"Data storage",permalink:"/docs/1.13.0/development/backend/services/storage/plugins/data-storage/"}},l={},g=[{value:"Overview",id:"overview",level:2},{value:"Interface",id:"interface",level:2},{value:"Implementation",id:"implementation",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:["This extension point allows to define how storage microservice decides which ",(0,s.jsx)(t.a,{href:"/docs/1.13.0/development/backend/services/storage/plugins/data-storage/",children:"Data storage plugin"})," to use to store a given AIP and its associated files."]})}),"\n",(0,s.jsx)(t.p,{children:"REGARDS provides many implementation of this extension point :"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://github.com/RegardsOss/regards-storage/blob/master/storage/storage-plugin/src/main/java/fr/cnes/regards/modules/storage/plugin/allocation/strategy/DefaultAllocationStrategyPlugin.java",children:"DefaultAllocationStrategyPlugin"})," : Store all AIP files in the data storage with the highter priority"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://github.com/RegardsOss/regards-storage/blob/master/storage/storage-plugin/src/main/java/fr/cnes/regards/modules/storage/plugin/allocation/strategy/DefaultMultipleAllocationStrategy.java",children:"DefaultMultipleAllocationStrategy"})," : Store all AIP files in the given data storage(s). If many data storages are provided then the file are stored many times."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://github.com/RegardsOss/regards-storage/blob/master/storage/storage-plugin/src/main/java/fr/cnes/regards/modules/storage/plugin/allocation/strategy/PropertyDataStorageMapping.java",children:"PropertyDataStorageMapping"})," : Read into the AIP a property value and then find the data storage mapped to this value in the plugin configuration."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"interface",children:"Interface"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://github.com/RegardsOss/regards-storage/blob/master/storage/storage-domain/src/main/java/fr/cnes/regards/modules/storage/domain/plugin/IAllocationStrategy.java",children:"IAllocationStrategy"})}),"\n",(0,s.jsx)(t.h2,{id:"implementation",children:"Implementation"}),"\n",(0,s.jsxs)(t.p,{children:["To learn more about how to create your own plugin see ",(0,s.jsx)(t.a,{href:"/docs/1.13.0/development/backend/framework/modules/plugins/",children:"Plugins"})]}),"\n",(0,s.jsx)(t.p,{children:"Here under is an exemple of how to implements this extension point to create your own business logic."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'@Plugin(id = "exemple", version = "1.0.0", description = "exemple plugin",\n        author = "REGARDS Team", contact = "regards@c-s.fr", licence = "LGPLv3.0", owner = "CSSI",\n        url = "https://github.com/RegardsOss")\npublic class Plugin implements IAllocationStrategy {\n\n        @Override\n        public Multimap<Long, StorageDataFile> dispatch(Collection<StorageDataFile> dataFilesToHandle,\n            DispatchErrors dispatchErrors) {\n                // return map with key=<data storage plugin id> and value=<StorageDataFile to store>\n        }\n}\n'})})]})}function c(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>i});var s=a(96540);const n={},r=s.createContext(n);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);
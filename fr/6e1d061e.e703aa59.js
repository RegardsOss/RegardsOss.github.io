(window.webpackJsonp=window.webpackJsonp||[]).push([[1166],{1236:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return d}));var o=n(3),r=n(7),l=(n(0),n(2701)),a={id:"frontend-view-theme",title:"Material and module themes",sidebar_label:"Theme",slug:"/development/frontend/view/theme"},i={unversionedId:"development/frontend/components/frontend-view-theme",id:"development/frontend/components/frontend-view-theme",isDocsHomePage:!1,title:"Material and module themes",description:"Description",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/development/frontend/components/theme.md",slug:"/development/frontend/view/theme",permalink:"/fr/docs/next/development/frontend/view/theme",editUrl:"https://github.com/RegardsOss/RegardsOss.github.io/edit/master/i18n/fr/docusaurus-plugin-content-docs/current/development/frontend/components/theme.md",version:"current",sidebar_label:"Theme",sidebar:"dev",previous:{title:"Internationalization",permalink:"/fr/docs/next/development/frontend/view/international"},next:{title:"Redux form",permalink:"/fr/docs/next/development/frontend/view/forms"}},c=[{value:"Description",id:"description",children:[]},{value:"Dependencies",id:"dependencies",children:[]},{value:"How to",id:"how-to",children:[{value:"Get properties from the MUI and module themes context",id:"get-properties-from-the-mui-and-module-themes-context",children:[]},{value:"Connect with Material UI theme context",id:"connect-with-material-ui-theme-context",children:[]},{value:"Connect with MUI and module theme",id:"connect-with-mui-and-module-theme",children:[]},{value:"1. Declare style builder",id:"1-declare-style-builder",children:[]},{value:"2. Connect component to module theme provider",id:"2-connect-component-to-module-theme-provider",children:[]},{value:"3. Add context type",id:"3-add-context-type",children:[]}]}],s={toc:c};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(o.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"description"},"Description"),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"@regards/theme")," (web_modules/utils/theme) projects holds components and tools designed to simplify the use of global ",Object(l.b)("a",{parentName:"p",href:"http://www.material-ui.com/#/customization/themes"},"Material-ui")," theme - called MUI theme in the next lines - over all REGARDS frontend react components. MUI theme holds a dictionnary of variables, sorted by categories, defining styles like:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"padding"),Object(l.b)("li",{parentName:"ul"},"margin"),Object(l.b)("li",{parentName:"ul"},"borders"),Object(l.b)("li",{parentName:"ul"},"colors "),Object(l.b)("li",{parentName:"ul"},"and so on...")),Object(l.b)("p",null,"Beside MUI theme, some of the ",Object(l.b)("inlineCode",{parentName:"p"},"regards/theme")," components also provides a connector with ",Object(l.b)("inlineCode",{parentName:"p"},"module theme")," context. The context corresponds to specific variables built by a theme builder function for a component or a group of components."),Object(l.b)("p",null,"Both MUI and module themes context will be detailed in following sections."),Object(l.b)("h2",{id:"dependencies"},"Dependencies"),Object(l.b)("p",null,"To use the REGARDS theme components and tools you must add the here under package to your package.json dependencies:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"@regardsoss/theme")),Object(l.b)("h2",{id:"how-to"},"How to"),Object(l.b)("h3",{id:"get-properties-from-the-mui-and-module-themes-context"},"Get properties from the MUI and module themes context"),Object(l.b)("p",null,"In components ",Object(l.b)("strong",{parentName:"p"},"with theme context")," (see later sections), you can retrieve theme properties in:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"this.context.muiTheme"),": That object holds Material UI theme categories, palette, card, and so on. Please refer to Material UI official documentation for more details about that object."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"this.context.moduleTheme"),": That object holds module theme, as exported by the theme builder function.")),Object(l.b)("p",null,"In order to access those context elements, the component must declare the ",Object(l.b)("inlineCode",{parentName:"p"},"themeContextType")," in ",Object(l.b)("inlineCode",{parentName:"p"},"contextTypes"),", as shown in example below."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-javascript"},"import { themeContextType } from '@regardsoss/theme'\n\nexport class ExampleComponent extends React.Component {\n\n  static contextTypes = {\n      ...themeContextType,\n  }\n\n  render() {\n    const mainColor = this.context.muiTheme.palette.priamy1Color\n    const someModuleStyle = this.context.moduleTheme.aValue\n    ...\n  }\n}\n")),Object(l.b)("h3",{id:"connect-with-material-ui-theme-context"},"Connect with Material UI theme context"),Object(l.b)("p",null,"In REGARDS, the MUI theme context can be provided to children by using ",Object(l.b)("strong",{parentName:"p"},"ThemeProvider")," component like demonstrated in following exmaple. Please note that this connector adds only MUI theme context, not the module theme."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-javascript"},"import { ThemeProvider } from '@regardsoss/theme'\n\nexport class ExampleContainer extends React.Component {\n\n  render() {\n    return (\n      <ThemeProvider>\n        <ExampleComponent />\n      </ThemeProvider>\n    )\n  }\n}\n")),Object(l.b)("p",null,"In the previous example, ExampleComponent will be able to access the MUI theme variables through context ",Object(l.b)("em",{parentName:"p"},"but ExampleContainer will not"),". Indeed context is defined for ",Object(l.b)("strong",{parentName:"p"},"ThemeProvider children"),", in the React meaning."),Object(l.b)("p",null,"Note: Most of the time, REGARDS developer doesn't need to use the ThemeProvider, as MUI Theme context is provided in all REGARDS applications."),Object(l.b)("h3",{id:"connect-with-mui-and-module-theme"},"Connect with MUI and module theme"),Object(l.b)("p",null,"As explained before in this page, REGARDS allows a component or a group of components to define custom styles, called ",Object(l.b)("inlineCode",{parentName:"p"},"module styles"),", through a style builder function. The developer should follow the next steps to define and access such theme in components."),Object(l.b)("h3",{id:"1-declare-style-builder"},"1","."," Declare style builder"),Object(l.b)("p",null,"The style builder function produces a javascript object based on MUI theme as parameter. Such object must be structured to match component(s) needs at render time. By convention in REGARDS, style builder functions are placed in styles.js files. "),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-js"},"// content of styles.js\n\n/**\n * Builds module style on theme\n */\nexport default theme => ({ // MUI theme is provided as function parameter, to access MUI colors and such...\n  myCustomPane: {\n    color: theme.palette.textColor,\n  }\n  // ...\n})\n")),Object(l.b)("p",null,"When dealing with styles, we also declare frequently an index.js file, that only exports the style builder function in an object like { style: styleBuilderFunction }. That makes it easier to instantiate context later on."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-js"},"// content of index.js\nimport styles from './styles'\n\nmodule.exports = { styles }\n\n")),Object(l.b)("h3",{id:"2-connect-component-to-module-theme-provider"},"2","."," Connect component to module theme provider"),Object(l.b)("p",null,"In REGARDS, the MUI and module theme contexts can be provided to children by using either:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"ModuleStyleProvider")," component")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"withModuleStyle")," decorator function"),Object(l.b)("p",{parentName:"li"},"Those two methods are detailed in sections below."),Object(l.b)("p",{parentName:"li"},Object(l.b)("em",{parentName:"p"},"Note: Theme connectors also define an optional parameter/property called ",Object(l.b)("inlineCode",{parentName:"em"},"stackCallingContext")," (false by default). That property, when true, indicates that the new context and parent context should be merged. It results in providing both parent and new context themes to children. When exploring REGARDS code, that method is frequently encountered, especially in common components, as it allows the calling component defining children using calling context themes while API components still access themes in their own context.")))),Object(l.b)("h4",{id:"2a-using-modulestyleprovider"},"2",".","a Using ModuleStyleProvider"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"ModuleStyleProvider")," component provides MUI module themes context to its React children, as demonstrated in example below.\nIt defines the following properties:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"module"),": an object with a single field ",Object(l.b)("inlineCode",{parentName:"li"},"styles"),", holding the style builder function."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"stackCallingContext"),": an optional boolean, false by default. See note in parent section for more detail.")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},"  import { ModuleStyleProvider } from '@regardsoss/theme'\n  import ExampleComponent from './ExampleComponent'\n  import moduleStyles from '../../styles' // assuming there is an index.js\n\n  export class ExampleContainer extends React.Component {\n\n    render() {\n      return (\n        <ModuleStyleProvider module={moduleStyles}>\n          <ExampleComponent />\n        </ModuleStyleProvider>)\n    }\n  }\n")),Object(l.b)("p",null,"In the previous example, ExampleComponent will be able to access muiTheme and moduleTheme through context ",Object(l.b)("em",{parentName:"p"},"but ExampleContainer will not"),". Indeed context is defined for ",Object(l.b)("strong",{parentName:"p"},"ModuleStyleProvider children"),", in the React meaning."),Object(l.b)("p",null,"For instance, in the following React tree, B and C can access themes through context, but A can not."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},"<A>\n  <ModuleStyleProvider module={moduleStyles}>\n      <B>\n        <C />\n      </B>\n  </ModuleStyleProvider>\n</A>\n")),Object(l.b)("h4",{id:"2b-using-withmodulestyle"},"2",".","b Using withModuleStyle"),Object(l.b)("p",null,"To use the REGARDS withModuleStyle decorator method, you need to export the component decorated with that method. It defines the following parameters (matching with ModuleStyleProvider properties described before):"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"module")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"stackCallingContext"))),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},"import { withModuleStyle } from '@regardsoss/theme'\nimport moduleStyles from '../../styles' // assuming there is an index.js\n\nclass ExampleContainer extends React.Component {\n\n  render() {\n    // ...\n  }\n}\n\nexport withModuleStyle(moduleStyles)(ExampleContainer)\n")),Object(l.b)("p",null,"The use of ",Object(l.b)("inlineCode",{parentName:"p"},"withModuleStyle(moduleStyles)(ExampleContainer)")," means that module theme context will be defined for ExampleContainer and all its children. Therefore, if we define the ",Object(l.b)("inlineCode",{parentName:"p"},"contextTypes")," in this container, it will be able accessing the module theme through its context."),Object(l.b)("h3",{id:"3-add-context-type"},"3","."," Add context type"),Object(l.b)("p",null,"Finally, theme context can be used in container children, and in container itself when withModuleStyle decorator method was used. To access it, as seen in first 'how to' section, the developer has to declare context types, like in example below."),Object(l.b)("p",null,"Example: a component declaring and consuming theme context:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},"import { withModuleStyle } from '@regardsoss/theme'\nimport moduleStyles from '../../styles' // assuming there is an index.js\n\nclass CompleteExample extends React.Component {\n\n  static contextTypes = {\n      ...themeContextType,\n  }\n\n  render() {\n    const { moduleTheme, muiTheme } = this.context\n    const styleFromTheme = { color: muiTheme.palette.textColor }\n    return (\n      <div>\n        <div style={styleFromTheme}>Using MUI theme color </div>\n        { /* \n        we suppose here that style builder returned something like \n        { completeExample: { border: '1px solid red', ...} } \n        */ }\n        <div style={moduleTheme.completeExample.style}>Using some module theme </div>\n      </div>\n    )\n    // ...\n  }\n}\n\nexport withModuleStyle(moduleStyles)(CompleteExample)\n")))}d.isMDXComponent=!0},2701:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return b}));var o=n(0),r=n.n(o);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),d=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=d(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,a=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=d(n),u=o,b=m["".concat(a,".").concat(u)]||m[u]||p[u]||l;return n?r.a.createElement(b,i(i({ref:t},s),{},{components:n})):r.a.createElement(b,i({ref:t},s))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var s=2;s<l;s++)a[s]=n[s];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);